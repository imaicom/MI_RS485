

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Tue Sep 21 13:34:38 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	12F1822
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 2.20
    24                           ; Generated 12/02/2020 GMT
    25                           ; 
    26                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC12F1822 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0007                     	;# 
    65  0008                     	;# 
    66  0009                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0015                     	;# 
    73  0016                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  001A                     	;# 
    79  001B                     	;# 
    80  001C                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  008C                     	;# 
    84  0091                     	;# 
    85  0092                     	;# 
    86  0095                     	;# 
    87  0096                     	;# 
    88  0097                     	;# 
    89  0098                     	;# 
    90  0099                     	;# 
    91  009A                     	;# 
    92  009B                     	;# 
    93  009B                     	;# 
    94  009C                     	;# 
    95  009D                     	;# 
    96  009E                     	;# 
    97  010C                     	;# 
    98  0111                     	;# 
    99  0112                     	;# 
   100  0115                     	;# 
   101  0116                     	;# 
   102  0117                     	;# 
   103  0118                     	;# 
   104  0119                     	;# 
   105  011A                     	;# 
   106  011B                     	;# 
   107  011D                     	;# 
   108  011D                     	;# 
   109  018C                     	;# 
   110  0191                     	;# 
   111  0191                     	;# 
   112  0192                     	;# 
   113  0193                     	;# 
   114  0193                     	;# 
   115  0193                     	;# 
   116  0194                     	;# 
   117  0195                     	;# 
   118  0196                     	;# 
   119  0199                     	;# 
   120  019A                     	;# 
   121  019B                     	;# 
   122  019B                     	;# 
   123  019B                     	;# 
   124  019B                     	;# 
   125  019C                     	;# 
   126  019C                     	;# 
   127  019D                     	;# 
   128  019E                     	;# 
   129  019F                     	;# 
   130  020C                     	;# 
   131  0211                     	;# 
   132  0211                     	;# 
   133  0212                     	;# 
   134  0212                     	;# 
   135  0213                     	;# 
   136  0213                     	;# 
   137  0214                     	;# 
   138  0214                     	;# 
   139  0215                     	;# 
   140  0215                     	;# 
   141  0215                     	;# 
   142  0216                     	;# 
   143  0216                     	;# 
   144  0217                     	;# 
   145  0217                     	;# 
   146  0291                     	;# 
   147  0291                     	;# 
   148  0292                     	;# 
   149  0293                     	;# 
   150  0294                     	;# 
   151  0295                     	;# 
   152  0295                     	;# 
   153  0296                     	;# 
   154  0391                     	;# 
   155  0392                     	;# 
   156  0393                     	;# 
   157  039A                     	;# 
   158  039C                     	;# 
   159  039D                     	;# 
   160  039E                     	;# 
   161  039F                     	;# 
   162  0FE4                     	;# 
   163  0FE5                     	;# 
   164  0FE6                     	;# 
   165  0FE7                     	;# 
   166  0FE8                     	;# 
   167  0FE9                     	;# 
   168  0FEA                     	;# 
   169  0FEB                     	;# 
   170  0FED                     	;# 
   171  0FEE                     	;# 
   172  0FEF                     	;# 
   173  0000                     	;# 
   174  0001                     	;# 
   175  0002                     	;# 
   176  0003                     	;# 
   177  0004                     	;# 
   178  0005                     	;# 
   179  0006                     	;# 
   180  0007                     	;# 
   181  0008                     	;# 
   182  0009                     	;# 
   183  000A                     	;# 
   184  000B                     	;# 
   185  000C                     	;# 
   186  0011                     	;# 
   187  0012                     	;# 
   188  0015                     	;# 
   189  0016                     	;# 
   190  0016                     	;# 
   191  0017                     	;# 
   192  0018                     	;# 
   193  0019                     	;# 
   194  001A                     	;# 
   195  001B                     	;# 
   196  001C                     	;# 
   197  001E                     	;# 
   198  001F                     	;# 
   199  008C                     	;# 
   200  0091                     	;# 
   201  0092                     	;# 
   202  0095                     	;# 
   203  0096                     	;# 
   204  0097                     	;# 
   205  0098                     	;# 
   206  0099                     	;# 
   207  009A                     	;# 
   208  009B                     	;# 
   209  009B                     	;# 
   210  009C                     	;# 
   211  009D                     	;# 
   212  009E                     	;# 
   213  010C                     	;# 
   214  0111                     	;# 
   215  0112                     	;# 
   216  0115                     	;# 
   217  0116                     	;# 
   218  0117                     	;# 
   219  0118                     	;# 
   220  0119                     	;# 
   221  011A                     	;# 
   222  011B                     	;# 
   223  011D                     	;# 
   224  011D                     	;# 
   225  018C                     	;# 
   226  0191                     	;# 
   227  0191                     	;# 
   228  0192                     	;# 
   229  0193                     	;# 
   230  0193                     	;# 
   231  0193                     	;# 
   232  0194                     	;# 
   233  0195                     	;# 
   234  0196                     	;# 
   235  0199                     	;# 
   236  019A                     	;# 
   237  019B                     	;# 
   238  019B                     	;# 
   239  019B                     	;# 
   240  019B                     	;# 
   241  019C                     	;# 
   242  019C                     	;# 
   243  019D                     	;# 
   244  019E                     	;# 
   245  019F                     	;# 
   246  020C                     	;# 
   247  0211                     	;# 
   248  0211                     	;# 
   249  0212                     	;# 
   250  0212                     	;# 
   251  0213                     	;# 
   252  0213                     	;# 
   253  0214                     	;# 
   254  0214                     	;# 
   255  0215                     	;# 
   256  0215                     	;# 
   257  0215                     	;# 
   258  0216                     	;# 
   259  0216                     	;# 
   260  0217                     	;# 
   261  0217                     	;# 
   262  0291                     	;# 
   263  0291                     	;# 
   264  0292                     	;# 
   265  0293                     	;# 
   266  0294                     	;# 
   267  0295                     	;# 
   268  0295                     	;# 
   269  0296                     	;# 
   270  0391                     	;# 
   271  0392                     	;# 
   272  0393                     	;# 
   273  039A                     	;# 
   274  039C                     	;# 
   275  039D                     	;# 
   276  039E                     	;# 
   277  039F                     	;# 
   278  0FE4                     	;# 
   279  0FE5                     	;# 
   280  0FE6                     	;# 
   281  0FE7                     	;# 
   282  0FE8                     	;# 
   283  0FE9                     	;# 
   284  0FEA                     	;# 
   285  0FEB                     	;# 
   286  0FED                     	;# 
   287  0FEE                     	;# 
   288  0FEF                     	;# 
   289                           
   290                           	psect	nvBANK0
   291  006E                     __pnvBANK0:
   292  006E                     _LEN:
   293  006E                     	ds	1
   294  000B                     _INTCON	set	11
   295  0015                     _TMR0	set	21
   296  000C                     _PORTA	set	12
   297  000B                     _INTCONbits	set	11
   298  005F                     _GIE	set	95
   299  0065                     _RA5	set	101
   300  005E                     _PEIE	set	94
   301  0064                     _RA4	set	100
   302  008D                     _RCIF	set	141
   303  008C                     _TRISA	set	140
   304  0099                     _OSCCON	set	153
   305  0095                     _OPTION_REG	set	149
   306  009B                     _ADRESL	set	155
   307  009C                     _ADRESH	set	156
   308  009D                     _ADCON0	set	157
   309  04E9                     _ADGO	set	1257
   310  048D                     _RCIE	set	1165
   311  011D                     _APFCON	set	285
   312  018C                     _ANSELA	set	396
   313  019F                     _BAUDCON	set	415
   314  019C                     _SPBRGH	set	412
   315  019B                     _SPBRG	set	411
   316  019E                     _TXSTA	set	414
   317  019A                     _TXREG	set	410
   318  019E                     _TXSTAbits	set	414
   319  0199                     _RCREG	set	409
   320  019D                     _RCSTA	set	413
   321  0CEC                     _CREN	set	3308
   322  0CE9                     _OERR	set	3305
   323  0293                     _CCP1CON	set	659
   324                           
   325                           	psect	cinit
   326  0086                     start_initialization:	
   327                           ; #config settings
   328                           
   329  0086                     __initialization:
   330                           
   331                           ; Clear objects allocated to COMMON
   332  0086  01FA               	clrf	__pbssCOMMON& (0+127)
   333  0087  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   334                           
   335                           ; Clear objects allocated to BANK0
   336  0088  3020               	movlw	low __pbssBANK0
   337  0089  0084               	movwf	4
   338  008A  3000               	movlw	high __pbssBANK0
   339  008B  0085               	movwf	5
   340  008C  3044               	movlw	68
   341  008D  3183  2332  3180   	fcall	clear_ram0
   342  0090                     end_of_initialization:	
   343                           ;End of C runtime variable initialization code
   344                           
   345  0090                     __end_of__initialization:
   346  0090  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   347  0091  0020               	movlb	0
   348  0092  2A99               	ljmp	_main	;jump to C main() function
   349                           
   350                           	psect	bssCOMMON
   351  007A                     __pbssCOMMON:
   352  007A                     _a:
   353  007A                     	ds	1
   354  007B                     _uart_rd_ptr:
   355  007B                     	ds	1
   356                           
   357                           	psect	bssBANK0
   358  0020                     __pbssBANK0:
   359  0020                     _UART_wr_buffer:
   360  0020                     	ds	10
   361  002A                     _UART_rd_buffer:
   362  002A                     	ds	10
   363  0034                     _msg:
   364  0034                     	ds	8
   365  003C                     _SW:
   366  003C                     	ds	3
   367  003F                     _cnt0:
   368  003F                     	ds	2
   369  0041                     _cnt01:
   370  0041                     	ds	2
   371  0043                     _TMR0H1:
   372  0043                     	ds	2
   373  0045                     _TMR0L1:
   374  0045                     	ds	2
   375  0047                     _TMR0H:
   376  0047                     	ds	2
   377  0049                     _TMR0L:
   378  0049                     	ds	2
   379  004B                     COMM_RS485@i2cdata2:
   380  004B                     	ds	1
   381  004C                     COMM_RS485@i2cdata:
   382  004C                     	ds	1
   383  004D                     COMM_RS485@regaddr:
   384  004D                     	ds	1
   385  004E                     COMM_RS485@devaddr:
   386  004E                     	ds	1
   387  004F                     _FF_mode:
   388  004F                     	ds	1
   389  0050                     _ID:
   390  0050                     	ds	1
   391  0051                     _SID:
   392  0051                     	ds	1
   393  0052                     _CMND:
   394  0052                     	ds	1
   395  0053                     _cnt1:
   396  0053                     	ds	1
   397  0054                     _RCVFLG:
   398  0054                     	ds	1
   399  0055                     _I2C_SDATA:
   400  0055                     	ds	1
   401  0056                     _I2C_MDATA:
   402  0056                     	ds	1
   403  0057                     _I2C_RA:
   404  0057                     	ds	1
   405  0058                     _I2C_DA:
   406  0058                     	ds	1
   407  0059                     _I2C_state:
   408  0059                     	ds	1
   409  005A                     _tick_count:
   410  005A                     	ds	1
   411  005B                     _cnt:
   412  005B                     	ds	1
   413  005C                     _message_state:
   414  005C                     	ds	1
   415  005D                     _COM_stage:
   416  005D                     	ds	1
   417  005E                     _REGC7:
   418  005E                     	ds	1
   419  005F                     _ctstart:
   420  005F                     	ds	1
   421  0060                     _uart_rcv_complete:
   422  0060                     	ds	1
   423  0061                     _n_uart_wrbuf:
   424  0061                     	ds	1
   425  0062                     _uart_buf_bytes:
   426  0062                     	ds	1
   427  0063                     _uart_wr_ptr:
   428  0063                     	ds	1
   429                           
   430                           	psect	clrtext
   431  0332                     clear_ram0:	
   432                           ;	Called with FSR0 containing the base address, and
   433                           ;	WREG with the size to clear
   434                           
   435  0332  0064               	clrwdt	;clear the watchdog before getting into this loop
   436  0333                     clrloop0:
   437  0333  0180               	clrf	0	;clear RAM location pointed to by FSR
   438  0334  3101               	addfsr 0,1
   439  0335  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   440  0336  2B33               	goto	clrloop0	;have we reached the end yet?
   441  0337  3400               	retlw	0	;all done for this memory range, return
   442                           
   443                           	psect	cstackBANK1
   444  00A0                     __pcstackBANK1:
   445  00A0                     main@i:
   446                           
   447                           ; 2 bytes @ 0x0
   448  00A0                     	ds	2
   449  00A2                     main@j:
   450                           
   451                           ; 2 bytes @ 0x2
   452  00A2                     	ds	2
   453                           
   454                           	psect	cstackCOMMON
   455  0070                     __pcstackCOMMON:
   456  0070                     ?_Rcv_RS485:
   457  0070                     ?_isr:	
   458                           ; 1 bytes @ 0x0
   459                           
   460  0070                     ??_isr:	
   461                           ; 1 bytes @ 0x0
   462                           
   463  0070                     ?_COMM_RS485:	
   464                           ; 1 bytes @ 0x0
   465                           
   466  0070                     ?_InitializeUSART:	
   467                           ; 1 bytes @ 0x0
   468                           
   469  0070                     ?_put_UART:	
   470                           ; 1 bytes @ 0x0
   471                           
   472  0070                     ?_get_UART:	
   473                           ; 1 bytes @ 0x0
   474                           
   475  0070                     ?_main:	
   476                           ; 1 bytes @ 0x0
   477                           
   478                           
   479                           ; 1 bytes @ 0x0
   480  0070                     	ds	2
   481  0072                     ??_InitializeUSART:
   482  0072                     ??_put_UART:	
   483                           ; 1 bytes @ 0x2
   484                           
   485  0072                     ??_get_UART:	
   486                           ; 1 bytes @ 0x2
   487                           
   488                           
   489                           ; 1 bytes @ 0x2
   490  0072                     	ds	1
   491  0073                     put_UART@data:
   492  0073                     get_UART@data:	
   493                           ; 1 bytes @ 0x3
   494                           
   495                           
   496                           ; 1 bytes @ 0x3
   497  0073                     	ds	1
   498  0074                     ??_Rcv_RS485:
   499  0074                     ?_Send_RS485:	
   500                           ; 1 bytes @ 0x4
   501                           
   502  0074                     Send_RS485@ID:	
   503                           ; 1 bytes @ 0x4
   504                           
   505                           
   506                           ; 1 bytes @ 0x4
   507  0074                     	ds	1
   508  0075                     Send_RS485@n:
   509                           
   510                           ; 1 bytes @ 0x5
   511  0075                     	ds	1
   512  0076                     ??_Send_RS485:
   513  0076                     Rcv_RS485@i:	
   514                           ; 1 bytes @ 0x6
   515                           
   516                           
   517                           ; 1 bytes @ 0x6
   518  0076                     	ds	1
   519  0077                     Rcv_RS485@data:
   520                           
   521                           ; 1 bytes @ 0x7
   522  0077                     	ds	1
   523  0078                     ??_COMM_RS485:
   524                           
   525                           ; 1 bytes @ 0x8
   526  0078                     	ds	2
   527                           
   528                           	psect	cstackBANK0
   529  0064                     __pcstackBANK0:
   530  0064                     Send_RS485@CMND:
   531                           
   532                           ; 1 bytes @ 0x0
   533  0064                     	ds	1
   534  0065                     Send_RS485@data:
   535                           
   536                           ; 1 bytes @ 0x1
   537  0065                     	ds	1
   538  0066                     Send_RS485@chksum:
   539                           
   540                           ; 1 bytes @ 0x2
   541  0066                     	ds	1
   542  0067                     Send_RS485@j:
   543                           
   544                           ; 1 bytes @ 0x3
   545  0067                     	ds	1
   546  0068                     Send_RS485@i:
   547                           
   548                           ; 1 bytes @ 0x4
   549  0068                     	ds	1
   550  0069                     COMM_RS485@Resp:
   551                           
   552                           ; 1 bytes @ 0x5
   553  0069                     	ds	1
   554  006A                     COMM_RS485@j:
   555                           
   556                           ; 1 bytes @ 0x6
   557  006A                     	ds	1
   558  006B                     COMM_RS485@i:
   559                           
   560                           ; 1 bytes @ 0x7
   561  006B                     	ds	1
   562  006C                     COMM_RS485@RSP:
   563                           
   564                           ; 1 bytes @ 0x8
   565  006C                     	ds	1
   566  006D                     ??_main:
   567                           
   568                           ; 1 bytes @ 0x9
   569  006D                     	ds	1
   570                           
   571                           	psect	maintext
   572  0299                     __pmaintext:	
   573 ;;
   574 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   575 ;;
   576 ;; *************** function _main *****************
   577 ;; Defined at:
   578 ;;		line 351 in file "main.c"
   579 ;; Parameters:    Size  Location     Type
   580 ;;		None
   581 ;; Auto vars:     Size  Location     Type
   582 ;;  j               2    2[BANK1 ] int 
   583 ;;  i               2    0[BANK1 ] int 
   584 ;;  k               2    0        int 
   585 ;;  LED             2    0        unsigned short 
   586 ;; Return value:  Size  Location     Type
   587 ;;                  1    wreg      void 
   588 ;; Registers used:
   589 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   590 ;; Tracked objects:
   591 ;;		On entry : B1F/0
   592 ;;		On exit  : 0/0
   593 ;;		Unchanged: 0/0
   594 ;; Data sizes:     COMMON   BANK0   BANK1
   595 ;;      Params:         0       0       0
   596 ;;      Locals:         0       0       4
   597 ;;      Temps:          0       1       0
   598 ;;      Totals:         0       1       4
   599 ;;Total ram usage:        5 bytes
   600 ;; Hardware stack levels required when called: 4
   601 ;; This function calls:
   602 ;;		_COMM_RS485
   603 ;;		_InitializeUSART
   604 ;; This function is called by:
   605 ;;		Startup code after reset
   606 ;; This function uses a non-reentrant model
   607 ;;
   608                           
   609                           
   610                           ;psect for function _main
   611  0299                     _main:
   612  0299                     l1884:	
   613                           ;incstack = 0
   614                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   615                           
   616                           
   617                           ;main.c: 352:     unsigned short LED;;main.c: 353:     int i, j, k;;main.c: 355:     OPT
      +                          ION_REG = 0x80;
   618  0299  3080               	movlw	128
   619  029A  0021               	movlb	1	; select bank1
   620  029B  0095               	movwf	21	;volatile
   621                           
   622                           ;main.c: 356:     OSCCON = 0xFF;
   623  029C  30FF               	movlw	255
   624  029D  0099               	movwf	25	;volatile
   625  029E                     l1886:
   626                           
   627                           ;main.c: 357:     APFCON = 0x00;
   628  029E  0022               	movlb	2	; select bank2
   629  029F  019D               	clrf	29	;volatile
   630  02A0                     l1888:
   631                           
   632                           ;main.c: 358:     ANSELA = 0x04;
   633  02A0  3004               	movlw	4
   634  02A1  0023               	movlb	3	; select bank3
   635  02A2  008C               	movwf	12	;volatile
   636                           
   637                           ;main.c: 359:     CCP1CON = 0x00;
   638  02A3  0025               	movlb	5	; select bank5
   639  02A4  0193               	clrf	19	;volatile
   640  02A5                     l1890:
   641                           
   642                           ;main.c: 360:     TRISA = 0x06;
   643  02A5  3006               	movlw	6
   644  02A6  0021               	movlb	1	; select bank1
   645  02A7  008C               	movwf	12	;volatile
   646  02A8                     l1892:
   647                           
   648                           ;main.c: 361:     PORTA = 0x00;
   649  02A8  0020               	movlb	0	; select bank0
   650  02A9  018C               	clrf	12	;volatile
   651  02AA                     l1894:
   652                           
   653                           ;main.c: 363:     TMR0 = 0;
   654  02AA  0195               	clrf	21	;volatile
   655  02AB                     l1896:
   656                           
   657                           ;main.c: 364:     INTCON = 0x00;
   658  02AB  018B               	clrf	11	;volatile
   659                           
   660                           ;main.c: 365:     ANSELA = 0x04;
   661  02AC  3004               	movlw	4
   662  02AD  0023               	movlb	3	; select bank3
   663  02AE  008C               	movwf	12	;volatile
   664                           
   665                           ;main.c: 366:     ADCON0 = 0x09;
   666  02AF  3009               	movlw	9
   667  02B0  0021               	movlb	1	; select bank1
   668  02B1  009D               	movwf	29	;volatile
   669  02B2                     l1898:
   670                           
   671                           ;main.c: 367:     ADGO = 0;
   672  02B2  109D               	bcf	29,1	;volatile
   673  02B3                     l1900:
   674                           
   675                           ;main.c: 369:     InitializeUSART();
   676  02B3  3183  2323  3182   	fcall	_InitializeUSART
   677  02B6                     l1902:
   678                           
   679                           ;main.c: 371:     uart_rcv_complete = 0;
   680  02B6  0020               	movlb	0	; select bank0
   681  02B7  01E0               	clrf	_uart_rcv_complete
   682  02B8                     l1904:
   683                           
   684                           ;main.c: 372:     RCIE = 1;
   685  02B8  0021               	movlb	1	; select bank1
   686  02B9  1691               	bsf	17,5	;volatile
   687  02BA                     l1906:
   688                           
   689                           ;main.c: 373:     PEIE = 1;
   690  02BA  170B               	bsf	11,6	;volatile
   691  02BB                     l1908:
   692                           
   693                           ;main.c: 374:     GIE = 1;
   694  02BB  178B               	bsf	11,7	;volatile
   695  02BC                     l1910:
   696                           
   697                           ;main.c: 375:     RA5 = 1;
   698  02BC  0020               	movlb	0	; select bank0
   699  02BD  168C               	bsf	12,5	;volatile
   700  02BE                     l1912:
   701                           
   702                           ;main.c: 376:     RA5 = 0;
   703  02BE  128C               	bcf	12,5	;volatile
   704  02BF                     l1914:
   705                           
   706                           ;main.c: 377:     RA4 = 0;
   707  02BF  120C               	bcf	12,4	;volatile
   708  02C0                     l1916:
   709                           
   710                           ;main.c: 378:     LEN = 3;
   711  02C0  3003               	movlw	3
   712  02C1  00ED               	movwf	??_main
   713  02C2  086D               	movf	??_main,w
   714  02C3  00EE               	movwf	_LEN
   715  02C4                     l1918:
   716                           
   717                           ;main.c: 379:     FF_mode = 0;
   718  02C4  01CF               	clrf	_FF_mode
   719  02C5                     l1920:
   720                           
   721                           ;main.c: 382:         COMM_RS485();
   722  02C5  3180  2093  3182   	fcall	_COMM_RS485
   723  02C8                     l1922:
   724                           
   725                           ;main.c: 383:         for (i = 0; i < 10; i++) {
   726  02C8  0021               	movlb	1	; select bank1
   727  02C9  01A0               	clrf	main@i^(0+128)
   728  02CA  01A1               	clrf	(main@i+1)^(0+128)
   729  02CB                     l1928:
   730                           
   731                           ;main.c: 384:             for (j = 0; j < 10; j++);
   732  02CB  0021               	movlb	1	; select bank1
   733  02CC  01A2               	clrf	main@j^(0+128)
   734  02CD  01A3               	clrf	(main@j+1)^(0+128)
   735  02CE                     l1934:
   736  02CE  3001               	movlw	1
   737  02CF  0021               	movlb	1	; select bank1
   738  02D0  07A2               	addwf	main@j^(0+128),f
   739  02D1  3000               	movlw	0
   740  02D2  3DA3               	addwfc	(main@j+1)^(0+128),f
   741  02D3  0823               	movf	(main@j+1)^(0+128),w
   742  02D4  3A80               	xorlw	128
   743  02D5  0020               	movlb	0	; select bank0
   744  02D6  00ED               	movwf	??_main
   745  02D7  3080               	movlw	128
   746  02D8  026D               	subwf	??_main,w
   747  02D9  1D03               	skipz
   748  02DA  2ADE               	goto	u1155
   749  02DB  300A               	movlw	10
   750  02DC  0021               	movlb	1	; select bank1
   751  02DD  0222               	subwf	main@j^(0+128),w
   752  02DE                     u1155:
   753  02DE  1C03               	skipc
   754  02DF  2AE1               	goto	u1151
   755  02E0  2AE2               	goto	u1150
   756  02E1                     u1151:
   757  02E1  2ACE               	goto	l1934
   758  02E2                     u1150:
   759  02E2                     l1936:
   760                           
   761                           ;main.c: 385:         }
   762  02E2  3001               	movlw	1
   763  02E3  0021               	movlb	1	; select bank1
   764  02E4  07A0               	addwf	main@i^(0+128),f
   765  02E5  3000               	movlw	0
   766  02E6  3DA1               	addwfc	(main@i+1)^(0+128),f
   767  02E7  0821               	movf	(main@i+1)^(0+128),w
   768  02E8  3A80               	xorlw	128
   769  02E9  0020               	movlb	0	; select bank0
   770  02EA  00ED               	movwf	??_main
   771  02EB  3080               	movlw	128
   772  02EC  026D               	subwf	??_main,w
   773  02ED  1D03               	skipz
   774  02EE  2AF2               	goto	u1165
   775  02EF  300A               	movlw	10
   776  02F0  0021               	movlb	1	; select bank1
   777  02F1  0220               	subwf	main@i^(0+128),w
   778  02F2                     u1165:
   779  02F2  1C03               	skipc
   780  02F3  2AF5               	goto	u1161
   781  02F4  2AF6               	goto	u1160
   782  02F5                     u1161:
   783  02F5  2ACB               	goto	l1928
   784  02F6                     u1160:
   785  02F6  2AC5               	goto	l1920
   786  02F7  2885               	ljmp	start
   787  02F8                     __end_of_main:
   788                           
   789                           	psect	text1
   790  0323                     __ptext1:	
   791 ;; *************** function _InitializeUSART *****************
   792 ;; Defined at:
   793 ;;		line 247 in file "main.c"
   794 ;; Parameters:    Size  Location     Type
   795 ;;		None
   796 ;; Auto vars:     Size  Location     Type
   797 ;;  c               1    0        unsigned char 
   798 ;; Return value:  Size  Location     Type
   799 ;;                  1    wreg      void 
   800 ;; Registers used:
   801 ;;		wreg, status,2
   802 ;; Tracked objects:
   803 ;;		On entry : 0/0
   804 ;;		On exit  : 0/0
   805 ;;		Unchanged: 0/0
   806 ;; Data sizes:     COMMON   BANK0   BANK1
   807 ;;      Params:         0       0       0
   808 ;;      Locals:         0       0       0
   809 ;;      Temps:          0       0       0
   810 ;;      Totals:         0       0       0
   811 ;;Total ram usage:        0 bytes
   812 ;; Hardware stack levels used: 1
   813 ;; Hardware stack levels required when called: 1
   814 ;; This function calls:
   815 ;;		Nothing
   816 ;; This function is called by:
   817 ;;		_main
   818 ;; This function uses a non-reentrant model
   819 ;;
   820                           
   821                           
   822                           ;psect for function _InitializeUSART
   823  0323                     _InitializeUSART:
   824  0323                     l1874:	
   825                           ;incstack = 0
   826                           ; Regs used in _InitializeUSART: [wreg+status,2]
   827                           
   828                           
   829                           ;main.c: 248:     char c;;main.c: 251:     TXSTA = 0x24;
   830  0323  3024               	movlw	36
   831  0324  0023               	movlb	3	; select bank3
   832  0325  009E               	movwf	30	;volatile
   833                           
   834                           ;main.c: 252:     RCSTA = 0x90;
   835  0326  3090               	movlw	144
   836  0327  009D               	movwf	29	;volatile
   837                           
   838                           ;main.c: 253:     SPBRG = 0x67;
   839  0328  3067               	movlw	103
   840  0329  009B               	movwf	27	;volatile
   841  032A                     l1876:
   842                           
   843                           ;main.c: 254:     SPBRGH = 0x00;
   844  032A  019C               	clrf	28	;volatile
   845  032B                     l1878:
   846                           
   847                           ;main.c: 255:     SPBRG = 0xA0;
   848  032B  30A0               	movlw	160
   849  032C  009B               	movwf	27	;volatile
   850  032D                     l1880:
   851                           
   852                           ;main.c: 256:     SPBRGH = 0x01;
   853  032D  3001               	movlw	1
   854  032E  009C               	movwf	28	;volatile
   855  032F                     l1882:
   856                           
   857                           ;main.c: 257:     BAUDCON = 0x08;
   858  032F  3008               	movlw	8
   859  0330  009F               	movwf	31	;volatile
   860  0331                     l207:
   861  0331  0008               	return
   862  0332                     __end_of_InitializeUSART:
   863                           
   864                           	psect	text2
   865  0093                     __ptext2:	
   866 ;; *************** function _COMM_RS485 *****************
   867 ;; Defined at:
   868 ;;		line 135 in file "main.c"
   869 ;; Parameters:    Size  Location     Type
   870 ;;		None
   871 ;; Auto vars:     Size  Location     Type
   872 ;;  RSP             1    8[BANK0 ] unsigned char 
   873 ;;  i               1    7[BANK0 ] unsigned char 
   874 ;;  j               1    6[BANK0 ] unsigned char 
   875 ;;  Resp            1    5[BANK0 ] unsigned char 
   876 ;;  data            1    0        unsigned char 
   877 ;;  ASD_num         1    0        unsigned char 
   878 ;;  ASD_type        1    0        unsigned char 
   879 ;;  I2Cdata2        1    0        unsigned char 
   880 ;;  ch              1    0        unsigned char 
   881 ;;  k               1    0        unsigned char 
   882 ;;  N               1    0        unsigned char 
   883 ;; Return value:  Size  Location     Type
   884 ;;                  1    wreg      void 
   885 ;; Registers used:
   886 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   887 ;; Tracked objects:
   888 ;;		On entry : 0/0
   889 ;;		On exit  : 0/0
   890 ;;		Unchanged: 0/0
   891 ;; Data sizes:     COMMON   BANK0   BANK1
   892 ;;      Params:         0       0       0
   893 ;;      Locals:         0       4       0
   894 ;;      Temps:          2       0       0
   895 ;;      Totals:         2       4       0
   896 ;;Total ram usage:        6 bytes
   897 ;; Hardware stack levels used: 1
   898 ;; Hardware stack levels required when called: 3
   899 ;; This function calls:
   900 ;;		_Rcv_RS485
   901 ;;		_Send_RS485
   902 ;; This function is called by:
   903 ;;		_main
   904 ;; This function uses a non-reentrant model
   905 ;;
   906                           
   907                           
   908                           ;psect for function _COMM_RS485
   909  0093                     _COMM_RS485:
   910  0093                     l1750:	
   911                           ;incstack = 0
   912                           ; Regs used in _COMM_RS485: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   913                           
   914  0093                     l1752:
   915                           
   916                           ;main.c: 160:     if (uart_rcv_complete) {
   917  0093  0020               	movlb	0	; select bank0
   918  0094  0860               	movf	_uart_rcv_complete,w
   919  0095  1903               	btfsc	3,2
   920  0096  2898               	goto	u941
   921  0097  2899               	goto	u940
   922  0098                     u941:
   923  0098  296F               	goto	l1830
   924  0099                     u940:
   925  0099                     l1754:
   926                           
   927                           ;main.c: 161:         Resp = Rcv_RS485();
   928  0099  3181  21B5  3180   	fcall	_Rcv_RS485
   929  009C  00F8               	movwf	??_COMM_RS485
   930  009D  0878               	movf	??_COMM_RS485,w
   931  009E  0020               	movlb	0	; select bank0
   932  009F  00E9               	movwf	COMM_RS485@Resp
   933  00A0                     l1756:
   934                           
   935                           ;main.c: 162:         RA4 = 0;
   936  00A0  120C               	bcf	12,4	;volatile
   937  00A1                     l1758:
   938                           
   939                           ;main.c: 163:         for (i = 0; i < 10; i++) {
   940  00A1  01EB               	clrf	COMM_RS485@i
   941  00A2                     l1764:
   942                           
   943                           ;main.c: 164:             for (j = 0; j < 10; j++);
   944  00A2  01EA               	clrf	COMM_RS485@j
   945  00A3                     l1770:
   946  00A3  3001               	movlw	1
   947  00A4  00F8               	movwf	??_COMM_RS485
   948  00A5  0878               	movf	??_COMM_RS485,w
   949  00A6  07EA               	addwf	COMM_RS485@j,f
   950  00A7                     l1772:
   951  00A7  300A               	movlw	10
   952  00A8  026A               	subwf	COMM_RS485@j,w
   953  00A9  1C03               	skipc
   954  00AA  28AC               	goto	u951
   955  00AB  28AD               	goto	u950
   956  00AC                     u951:
   957  00AC  28A3               	goto	l1770
   958  00AD                     u950:
   959  00AD                     l1774:
   960                           
   961                           ;main.c: 165:         }
   962  00AD  3001               	movlw	1
   963  00AE  00F8               	movwf	??_COMM_RS485
   964  00AF  0878               	movf	??_COMM_RS485,w
   965  00B0  07EB               	addwf	COMM_RS485@i,f
   966  00B1                     l1776:
   967  00B1  300A               	movlw	10
   968  00B2  026B               	subwf	COMM_RS485@i,w
   969  00B3  1C03               	skipc
   970  00B4  28B6               	goto	u961
   971  00B5  28B7               	goto	u960
   972  00B6                     u961:
   973  00B6  28A2               	goto	l1764
   974  00B7                     u960:
   975  00B7                     l1778:
   976                           
   977                           ;main.c: 168:         if ((ID == 0xFE) || (ID == 1)) {
   978  00B7  30FE               	movlw	254
   979  00B8  0650               	xorwf	_ID,w
   980  00B9  1903               	btfsc	3,2
   981  00BA  28BC               	goto	u971
   982  00BB  28BD               	goto	u970
   983  00BC                     u971:
   984  00BC  2959               	goto	l1828
   985  00BD                     u970:
   986  00BD                     l1780:
   987  00BD  0350               	decf	_ID,w
   988  00BE  1D03               	btfss	3,2
   989  00BF  28C1               	goto	u981
   990  00C0  28C2               	goto	u980
   991  00C1                     u981:
   992  00C1  296F               	goto	l1830
   993  00C2                     u980:
   994  00C2  2959               	goto	l1828
   995  00C3                     l1782:
   996                           
   997                           ;main.c: 172:                     if (ID == 1) {
   998  00C3  0350               	decf	_ID,w
   999  00C4  1D03               	btfss	3,2
  1000  00C5  28C7               	goto	u991
  1001  00C6  28C8               	goto	u990
  1002  00C7                     u991:
  1003  00C7  296F               	goto	l170
  1004  00C8                     u990:
  1005  00C8                     l1784:
  1006                           
  1007                           ;main.c: 173:                         if (Resp == 0) {
  1008  00C8  0869               	movf	COMM_RS485@Resp,w
  1009  00C9  1D03               	btfss	3,2
  1010  00CA  28CC               	goto	u1001
  1011  00CB  28CD               	goto	u1000
  1012  00CC                     u1001:
  1013  00CC  28D2               	goto	l1788
  1014  00CD                     u1000:
  1015  00CD                     l1786:
  1016                           
  1017                           ;main.c: 174:                             RSP = 0x41;
  1018  00CD  3041               	movlw	65
  1019  00CE  00F8               	movwf	??_COMM_RS485
  1020  00CF  0878               	movf	??_COMM_RS485,w
  1021  00D0  00EC               	movwf	COMM_RS485@RSP
  1022                           
  1023                           ;main.c: 175:                         } else {
  1024  00D1  28D6               	goto	l1790
  1025  00D2                     l1788:
  1026                           
  1027                           ;main.c: 176:                             RSP = 0x4E;
  1028  00D2  304E               	movlw	78
  1029  00D3  00F8               	movwf	??_COMM_RS485
  1030  00D4  0878               	movf	??_COMM_RS485,w
  1031  00D5  00EC               	movwf	COMM_RS485@RSP
  1032  00D6                     l1790:
  1033                           
  1034                           ;main.c: 178:                         Send_RS485(RSP, ID, LEN);
  1035  00D6  0850               	movf	_ID,w
  1036  00D7  00F8               	movwf	??_COMM_RS485
  1037  00D8  0878               	movf	??_COMM_RS485,w
  1038  00D9  00F4               	movwf	Send_RS485@ID
  1039  00DA  086E               	movf	_LEN,w
  1040  00DB  00F9               	movwf	??_COMM_RS485+1
  1041  00DC  0879               	movf	??_COMM_RS485+1,w
  1042  00DD  00F5               	movwf	Send_RS485@n
  1043  00DE  086C               	movf	COMM_RS485@RSP,w
  1044  00DF  3182  2236  3180   	fcall	_Send_RS485
  1045  00E2  296F               	goto	l1830
  1046  00E3                     l1792:
  1047                           
  1048                           ;main.c: 183:                     if (ID == 1) {
  1049  00E3  0350               	decf	_ID,w
  1050  00E4  1D03               	btfss	3,2
  1051  00E5  28E7               	goto	u1011
  1052  00E6  28E8               	goto	u1010
  1053  00E7                     u1011:
  1054  00E7  296F               	goto	l170
  1055  00E8                     u1010:
  1056  00E8                     l1794:
  1057                           
  1058                           ;main.c: 184:                         if (Resp == 0) {
  1059  00E8  0869               	movf	COMM_RS485@Resp,w
  1060  00E9  1D03               	btfss	3,2
  1061  00EA  28EC               	goto	u1021
  1062  00EB  28ED               	goto	u1020
  1063  00EC                     u1021:
  1064  00EC  28F2               	goto	l1798
  1065  00ED                     u1020:
  1066  00ED                     l1796:
  1067                           
  1068                           ;main.c: 185:                             RSP = 0x41;
  1069  00ED  3041               	movlw	65
  1070  00EE  00F8               	movwf	??_COMM_RS485
  1071  00EF  0878               	movf	??_COMM_RS485,w
  1072  00F0  00EC               	movwf	COMM_RS485@RSP
  1073                           
  1074                           ;main.c: 186:                         } else {
  1075  00F1  28F6               	goto	l1800
  1076  00F2                     l1798:
  1077                           
  1078                           ;main.c: 187:                             RSP = 0x4E;
  1079  00F2  304E               	movlw	78
  1080  00F3  00F8               	movwf	??_COMM_RS485
  1081  00F4  0878               	movf	??_COMM_RS485,w
  1082  00F5  00EC               	movwf	COMM_RS485@RSP
  1083  00F6                     l1800:
  1084                           
  1085                           ;main.c: 189:                         Send_RS485(RSP, ID, LEN);
  1086  00F6  0850               	movf	_ID,w
  1087  00F7  00F8               	movwf	??_COMM_RS485
  1088  00F8  0878               	movf	??_COMM_RS485,w
  1089  00F9  00F4               	movwf	Send_RS485@ID
  1090  00FA  086E               	movf	_LEN,w
  1091  00FB  00F9               	movwf	??_COMM_RS485+1
  1092  00FC  0879               	movf	??_COMM_RS485+1,w
  1093  00FD  00F5               	movwf	Send_RS485@n
  1094  00FE  086C               	movf	COMM_RS485@RSP,w
  1095  00FF  3182  2236  3180   	fcall	_Send_RS485
  1096  0102  296F               	goto	l1830
  1097  0103                     l1802:
  1098                           
  1099                           ;main.c: 194:                     if (ID == 1) {
  1100  0103  0350               	decf	_ID,w
  1101  0104  1D03               	btfss	3,2
  1102  0105  2907               	goto	u1031
  1103  0106  2908               	goto	u1030
  1104  0107                     u1031:
  1105  0107  296F               	goto	l170
  1106  0108                     u1030:
  1107  0108                     l1804:
  1108                           
  1109                           ;main.c: 195:                         if (Resp == 0) {
  1110  0108  0869               	movf	COMM_RS485@Resp,w
  1111  0109  1D03               	btfss	3,2
  1112  010A  290C               	goto	u1041
  1113  010B  290D               	goto	u1040
  1114  010C                     u1041:
  1115  010C  2928               	goto	l1812
  1116  010D                     u1040:
  1117  010D                     l1806:
  1118                           
  1119                           ;main.c: 196:                             ADCON0 = 0x0B;
  1120  010D  300B               	movlw	11
  1121  010E  0021               	movlb	1	; select bank1
  1122  010F  009D               	movwf	29	;volatile
  1123  0110                     l1808:	
  1124                           ;main.c: 197:                             while ((ADCON0 & 0x02) == 1);
  1125                           
  1126  0110  3002               	movlw	2
  1127  0111  051D               	andwf	29,w	;volatile
  1128  0112  00F8               	movwf	??_COMM_RS485
  1129  0113  0378               	decf	??_COMM_RS485,w
  1130  0114  1903               	btfsc	3,2
  1131  0115  2917               	goto	u1051
  1132  0116  2918               	goto	u1050
  1133  0117                     u1051:
  1134  0117  2910               	goto	l1808
  1135  0118                     u1050:
  1136  0118                     l1810:
  1137                           
  1138                           ;main.c: 198:                             UART_rd_buffer[5] = ADRESH;
  1139  0118  081C               	movf	28,w	;volatile
  1140  0119  00F8               	movwf	??_COMM_RS485
  1141  011A  0878               	movf	??_COMM_RS485,w
  1142  011B  0020               	movlb	0	; select bank0
  1143  011C  00AF               	movwf	_UART_rd_buffer+5
  1144                           
  1145                           ;main.c: 199:                             UART_rd_buffer[6] = ADRESL;
  1146  011D  0021               	movlb	1	; select bank1
  1147  011E  081B               	movf	27,w	;volatile
  1148  011F  00F8               	movwf	??_COMM_RS485
  1149  0120  0878               	movf	??_COMM_RS485,w
  1150  0121  0020               	movlb	0	; select bank0
  1151  0122  00B0               	movwf	_UART_rd_buffer+6
  1152                           
  1153                           ;main.c: 200:                             RSP = 0x41;
  1154  0123  3041               	movlw	65
  1155  0124  00F8               	movwf	??_COMM_RS485
  1156  0125  0878               	movf	??_COMM_RS485,w
  1157  0126  00EC               	movwf	COMM_RS485@RSP
  1158                           
  1159                           ;main.c: 201:                         } else {
  1160  0127  292C               	goto	l1814
  1161  0128                     l1812:
  1162                           
  1163                           ;main.c: 202:                             RSP = 0x4E;
  1164  0128  304E               	movlw	78
  1165  0129  00F8               	movwf	??_COMM_RS485
  1166  012A  0878               	movf	??_COMM_RS485,w
  1167  012B  00EC               	movwf	COMM_RS485@RSP
  1168  012C                     l1814:
  1169                           
  1170                           ;main.c: 204:                         Send_RS485(RSP, ID, LEN);
  1171  012C  0850               	movf	_ID,w
  1172  012D  00F8               	movwf	??_COMM_RS485
  1173  012E  0878               	movf	??_COMM_RS485,w
  1174  012F  00F4               	movwf	Send_RS485@ID
  1175  0130  086E               	movf	_LEN,w
  1176  0131  00F9               	movwf	??_COMM_RS485+1
  1177  0132  0879               	movf	??_COMM_RS485+1,w
  1178  0133  00F5               	movwf	Send_RS485@n
  1179  0134  086C               	movf	COMM_RS485@RSP,w
  1180  0135  3182  2236  3180   	fcall	_Send_RS485
  1181  0138  296F               	goto	l1830
  1182  0139                     l1816:
  1183                           
  1184                           ;main.c: 209:                     if (ID == 1) {
  1185  0139  0350               	decf	_ID,w
  1186  013A  1D03               	btfss	3,2
  1187  013B  293D               	goto	u1061
  1188  013C  293E               	goto	u1060
  1189  013D                     u1061:
  1190  013D  296F               	goto	l170
  1191  013E                     u1060:
  1192  013E                     l1818:
  1193                           
  1194                           ;main.c: 210:                         if (Resp == 0) {
  1195  013E  0869               	movf	COMM_RS485@Resp,w
  1196  013F  1D03               	btfss	3,2
  1197  0140  2942               	goto	u1071
  1198  0141  2943               	goto	u1070
  1199  0142                     u1071:
  1200  0142  2948               	goto	l1822
  1201  0143                     u1070:
  1202  0143                     l1820:
  1203                           
  1204                           ;main.c: 211:                             RSP = 0x41;
  1205  0143  3041               	movlw	65
  1206  0144  00F8               	movwf	??_COMM_RS485
  1207  0145  0878               	movf	??_COMM_RS485,w
  1208  0146  00EC               	movwf	COMM_RS485@RSP
  1209                           
  1210                           ;main.c: 212:                         } else {
  1211  0147  294C               	goto	l1824
  1212  0148                     l1822:
  1213                           
  1214                           ;main.c: 213:                             RSP = 0x4E;
  1215  0148  304E               	movlw	78
  1216  0149  00F8               	movwf	??_COMM_RS485
  1217  014A  0878               	movf	??_COMM_RS485,w
  1218  014B  00EC               	movwf	COMM_RS485@RSP
  1219  014C                     l1824:
  1220                           
  1221                           ;main.c: 215:                         Send_RS485(RSP, ID, LEN);
  1222  014C  0850               	movf	_ID,w
  1223  014D  00F8               	movwf	??_COMM_RS485
  1224  014E  0878               	movf	??_COMM_RS485,w
  1225  014F  00F4               	movwf	Send_RS485@ID
  1226  0150  086E               	movf	_LEN,w
  1227  0151  00F9               	movwf	??_COMM_RS485+1
  1228  0152  0879               	movf	??_COMM_RS485+1,w
  1229  0153  00F5               	movwf	Send_RS485@n
  1230  0154  086C               	movf	COMM_RS485@RSP,w
  1231  0155  3182  2236  3180   	fcall	_Send_RS485
  1232  0158  296F               	goto	l1830
  1233  0159                     l1828:
  1234  0159  0852               	movf	_CMND,w
  1235  015A  00F8               	movwf	??_COMM_RS485
  1236  015B  01F9               	clrf	??_COMM_RS485+1
  1237                           
  1238                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1239                           ; Switch size 1, requested type "simple"
  1240                           ; Number of cases is 1, Range of values is 0 to 0
  1241                           ; switch strategies available:
  1242                           ; Name         Instructions Cycles
  1243                           ; simple_byte            4     3 (average)
  1244                           ; direct_byte            8     6 (fixed)
  1245                           ; jumptable            260     6 (fixed)
  1246                           ;	Chosen strategy is simple_byte
  1247  015C  0879               	movf	??_COMM_RS485+1,w
  1248  015D  3A00               	xorlw	0	; case 0
  1249  015E  1903               	skipnz
  1250  015F  2961               	goto	l1958
  1251  0160  296F               	goto	l1830
  1252  0161                     l1958:
  1253                           
  1254                           ; Switch size 1, requested type "simple"
  1255                           ; Number of cases is 4, Range of values is 0 to 3
  1256                           ; switch strategies available:
  1257                           ; Name         Instructions Cycles
  1258                           ; simple_byte           13     7 (average)
  1259                           ; direct_byte           14     6 (fixed)
  1260                           ; jumptable            260     6 (fixed)
  1261                           ;	Chosen strategy is simple_byte
  1262  0161  0878               	movf	??_COMM_RS485,w
  1263  0162  3A00               	xorlw	0	; case 0
  1264  0163  1903               	skipnz
  1265  0164  28C3               	goto	l1782
  1266  0165  3A01               	xorlw	1	; case 1
  1267  0166  1903               	skipnz
  1268  0167  28E3               	goto	l1792
  1269  0168  3A03               	xorlw	3	; case 2
  1270  0169  1903               	skipnz
  1271  016A  2903               	goto	l1802
  1272  016B  3A01               	xorlw	1	; case 3
  1273  016C  1903               	skipnz
  1274  016D  2939               	goto	l1816
  1275  016E  296F               	goto	l1830
  1276  016F                     l170:	
  1277                           ;main.c: 219:         }
  1278                           
  1279  016F                     l1830:
  1280                           
  1281                           ;main.c: 222:     for (i = 0; i < 10; i++) {
  1282  016F  0020               	movlb	0	; select bank0
  1283  0170  01EB               	clrf	COMM_RS485@i
  1284  0171                     l1836:
  1285                           
  1286                           ;main.c: 223:         for (j = 0; j < 10; j++);
  1287  0171  01EA               	clrf	COMM_RS485@j
  1288  0172                     l1842:
  1289  0172  3001               	movlw	1
  1290  0173  00F8               	movwf	??_COMM_RS485
  1291  0174  0878               	movf	??_COMM_RS485,w
  1292  0175  07EA               	addwf	COMM_RS485@j,f
  1293  0176                     l1844:
  1294  0176  300A               	movlw	10
  1295  0177  026A               	subwf	COMM_RS485@j,w
  1296  0178  1C03               	skipc
  1297  0179  297B               	goto	u1081
  1298  017A  297C               	goto	u1080
  1299  017B                     u1081:
  1300  017B  2972               	goto	l1842
  1301  017C                     u1080:
  1302  017C                     l1846:
  1303                           
  1304                           ;main.c: 224:     }
  1305  017C  3001               	movlw	1
  1306  017D  00F8               	movwf	??_COMM_RS485
  1307  017E  0878               	movf	??_COMM_RS485,w
  1308  017F  07EB               	addwf	COMM_RS485@i,f
  1309  0180                     l1848:
  1310  0180  300A               	movlw	10
  1311  0181  026B               	subwf	COMM_RS485@i,w
  1312  0182  1C03               	skipc
  1313  0183  2985               	goto	u1091
  1314  0184  2986               	goto	u1090
  1315  0185                     u1091:
  1316  0185  2971               	goto	l1836
  1317  0186                     u1090:
  1318  0186                     l195:
  1319                           
  1320                           ;main.c: 227:     if (TXSTAbits.TRMT == 1) {
  1321  0186  0023               	movlb	3	; select bank3
  1322  0187  1C9E               	btfss	30,1	;volatile
  1323  0188  298A               	goto	u1101
  1324  0189  298B               	goto	u1100
  1325  018A                     u1101:
  1326  018A  29B4               	goto	l198
  1327  018B                     u1100:
  1328  018B                     l1850:
  1329                           
  1330                           ;main.c: 228:         if (n_uart_wrbuf == 0) {
  1331  018B  0020               	movlb	0	; select bank0
  1332  018C  0861               	movf	_n_uart_wrbuf,w
  1333  018D  1D03               	btfss	3,2
  1334  018E  2990               	goto	u1111
  1335  018F  2991               	goto	u1110
  1336  0190                     u1111:
  1337  0190  2993               	goto	l199
  1338  0191                     u1110:
  1339  0191                     l1852:
  1340                           
  1341                           ;main.c: 229:             RA5 = 0;
  1342  0191  128C               	bcf	12,5	;volatile
  1343                           
  1344                           ;main.c: 230:         } else {
  1345  0192  2994               	goto	l1854
  1346  0193                     l199:
  1347                           
  1348                           ;main.c: 231:             RA5 = 1;
  1349  0193  168C               	bsf	12,5	;volatile
  1350  0194                     l1854:
  1351                           
  1352                           ;main.c: 233:         if (n_uart_wrbuf != 0) {
  1353  0194  0861               	movf	_n_uart_wrbuf,w
  1354  0195  1903               	btfsc	3,2
  1355  0196  2998               	goto	u1121
  1356  0197  2999               	goto	u1120
  1357  0198                     u1121:
  1358  0198  29B4               	goto	l198
  1359  0199                     u1120:
  1360  0199                     l1856:
  1361                           
  1362                           ;main.c: 234:             TXREG = UART_wr_buffer[uart_wr_ptr];
  1363  0199  0863               	movf	_uart_wr_ptr,w
  1364  019A  3E20               	addlw	(low (_UART_wr_buffer| 0))& (0+255)
  1365  019B  0086               	movwf	6
  1366  019C  0187               	clrf	7
  1367  019D  0801               	movf	1,w
  1368  019E  0023               	movlb	3	; select bank3
  1369  019F  009A               	movwf	26	;volatile
  1370  01A0                     l1858:
  1371                           
  1372                           ;main.c: 235:             uart_wr_ptr++;
  1373  01A0  3001               	movlw	1
  1374  01A1  00F8               	movwf	??_COMM_RS485
  1375  01A2  0878               	movf	??_COMM_RS485,w
  1376  01A3  0020               	movlb	0	; select bank0
  1377  01A4  07E3               	addwf	_uart_wr_ptr,f
  1378  01A5                     l1860:
  1379                           
  1380                           ;main.c: 236:             if (uart_wr_ptr > 10) uart_wr_ptr = 0;
  1381  01A5  300B               	movlw	11
  1382  01A6  0263               	subwf	_uart_wr_ptr,w
  1383  01A7  1C03               	skipc
  1384  01A8  29AA               	goto	u1131
  1385  01A9  29AB               	goto	u1130
  1386  01AA                     u1131:
  1387  01AA  29AC               	goto	l1864
  1388  01AB                     u1130:
  1389  01AB                     l1862:
  1390  01AB  01E3               	clrf	_uart_wr_ptr
  1391  01AC                     l1864:
  1392                           
  1393                           ;main.c: 237:             n_uart_wrbuf--;
  1394  01AC  3001               	movlw	1
  1395  01AD  02E1               	subwf	_n_uart_wrbuf,f
  1396  01AE                     l1866:
  1397                           
  1398                           ;main.c: 238:             if (n_uart_wrbuf == 0) uart_wr_ptr = 0;
  1399  01AE  0861               	movf	_n_uart_wrbuf,w
  1400  01AF  1D03               	btfss	3,2
  1401  01B0  29B2               	goto	u1141
  1402  01B1  29B3               	goto	u1140
  1403  01B2                     u1141:
  1404  01B2  29B4               	goto	l198
  1405  01B3                     u1140:
  1406  01B3                     l1868:
  1407  01B3  01E3               	clrf	_uart_wr_ptr
  1408  01B4                     l198:	
  1409                           ;main.c: 240:     }
  1410                           
  1411  01B4                     l204:
  1412  01B4  0008               	return
  1413  01B5                     __end_of_COMM_RS485:
  1414                           
  1415                           	psect	text3
  1416  0236                     __ptext3:	
  1417 ;; *************** function _Send_RS485 *****************
  1418 ;; Defined at:
  1419 ;;		line 267 in file "main.c"
  1420 ;; Parameters:    Size  Location     Type
  1421 ;;  CMND            1    wreg     unsigned char 
  1422 ;;  ID              1    4[COMMON] unsigned char 
  1423 ;;  n               1    5[COMMON] unsigned char 
  1424 ;; Auto vars:     Size  Location     Type
  1425 ;;  CMND            1    0[BANK0 ] unsigned char 
  1426 ;;  i               1    4[BANK0 ] unsigned char 
  1427 ;;  j               1    3[BANK0 ] unsigned char 
  1428 ;;  chksum          1    2[BANK0 ] unsigned char 
  1429 ;;  data            1    1[BANK0 ] unsigned char 
  1430 ;; Return value:  Size  Location     Type
  1431 ;;                  1    wreg      void 
  1432 ;; Registers used:
  1433 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1434 ;; Tracked objects:
  1435 ;;		On entry : 0/0
  1436 ;;		On exit  : 0/0
  1437 ;;		Unchanged: 0/0
  1438 ;; Data sizes:     COMMON   BANK0   BANK1
  1439 ;;      Params:         2       0       0
  1440 ;;      Locals:         0       5       0
  1441 ;;      Temps:          1       0       0
  1442 ;;      Totals:         3       5       0
  1443 ;;Total ram usage:        8 bytes
  1444 ;; Hardware stack levels used: 1
  1445 ;; Hardware stack levels required when called: 2
  1446 ;; This function calls:
  1447 ;;		_put_UART
  1448 ;; This function is called by:
  1449 ;;		_COMM_RS485
  1450 ;; This function uses a non-reentrant model
  1451 ;;
  1452                           
  1453                           
  1454                           ;psect for function _Send_RS485
  1455  0236                     _Send_RS485:
  1456                           
  1457                           ;incstack = 0
  1458                           ; Regs used in _Send_RS485: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1459                           ;Send_RS485@CMND stored from wreg
  1460  0236  0020               	movlb	0	; select bank0
  1461  0237  00E4               	movwf	Send_RS485@CMND
  1462  0238                     l1692:
  1463                           
  1464                           ;main.c: 268:     byte i, j, data, chksum;;main.c: 269:     chksum = 0;
  1465  0238  01E6               	clrf	Send_RS485@chksum
  1466  0239                     l1694:
  1467                           
  1468                           ;main.c: 271:     RA5 = 1;
  1469  0239  168C               	bsf	12,5	;volatile
  1470  023A                     l1696:
  1471                           
  1472                           ;main.c: 272:     RA4 = 1;
  1473  023A  160C               	bsf	12,4	;volatile
  1474  023B                     l1698:
  1475                           
  1476                           ;main.c: 273:     put_UART(0xFF);
  1477  023B  30FF               	movlw	255
  1478  023C  3183  2310  3182   	fcall	_put_UART
  1479  023F                     l1700:
  1480                           
  1481                           ;main.c: 274:     put_UART(0xFF);
  1482  023F  30FF               	movlw	255
  1483  0240  3183  2310  3182   	fcall	_put_UART
  1484  0243                     l1702:
  1485                           
  1486                           ;main.c: 275:     put_UART(CMND);
  1487  0243  0020               	movlb	0	; select bank0
  1488  0244  0864               	movf	Send_RS485@CMND,w
  1489  0245  3183  2310  3182   	fcall	_put_UART
  1490  0248                     l1704:
  1491                           
  1492                           ;main.c: 276:     chksum += CMND;
  1493  0248  0020               	movlb	0	; select bank0
  1494  0249  0864               	movf	Send_RS485@CMND,w
  1495  024A  00F6               	movwf	??_Send_RS485
  1496  024B  0876               	movf	??_Send_RS485,w
  1497  024C  07E6               	addwf	Send_RS485@chksum,f
  1498  024D                     l1706:
  1499                           
  1500                           ;main.c: 277:     put_UART(ID);
  1501  024D  0874               	movf	Send_RS485@ID,w
  1502  024E  3183  2310  3182   	fcall	_put_UART
  1503  0251                     l1708:
  1504                           
  1505                           ;main.c: 278:     chksum += ID;
  1506  0251  0874               	movf	Send_RS485@ID,w
  1507  0252  00F6               	movwf	??_Send_RS485
  1508  0253  0876               	movf	??_Send_RS485,w
  1509  0254  0020               	movlb	0	; select bank0
  1510  0255  07E6               	addwf	Send_RS485@chksum,f
  1511  0256                     l1710:
  1512                           
  1513                           ;main.c: 279:     put_UART(n);
  1514  0256  0875               	movf	Send_RS485@n,w
  1515  0257  3183  2310  3182   	fcall	_put_UART
  1516  025A                     l1712:
  1517                           
  1518                           ;main.c: 280:     chksum += n;
  1519  025A  0875               	movf	Send_RS485@n,w
  1520  025B  00F6               	movwf	??_Send_RS485
  1521  025C  0876               	movf	??_Send_RS485,w
  1522  025D  0020               	movlb	0	; select bank0
  1523  025E  07E6               	addwf	Send_RS485@chksum,f
  1524  025F                     l1714:
  1525                           
  1526                           ;main.c: 281:     for (i = 0; i < n; i++) {
  1527  025F  01E8               	clrf	Send_RS485@i
  1528  0260  2A76               	goto	l1724
  1529  0261                     l1716:
  1530                           
  1531                           ;main.c: 282:         data = UART_rd_buffer[i + 5];
  1532  0261  0868               	movf	Send_RS485@i,w
  1533  0262  3E2F               	addlw	(low ((_UART_rd_buffer| 0+5)))& (0+255)
  1534  0263  0086               	movwf	6
  1535  0264  0187               	clrf	7
  1536  0265  0801               	movf	1,w
  1537  0266  00F6               	movwf	??_Send_RS485
  1538  0267  0876               	movf	??_Send_RS485,w
  1539  0268  00E5               	movwf	Send_RS485@data
  1540  0269                     l1718:
  1541                           
  1542                           ;main.c: 283:         put_UART(data);
  1543  0269  0865               	movf	Send_RS485@data,w
  1544  026A  3183  2310  3182   	fcall	_put_UART
  1545  026D                     l1720:
  1546                           
  1547                           ;main.c: 284:         chksum += data;
  1548  026D  0020               	movlb	0	; select bank0
  1549  026E  0865               	movf	Send_RS485@data,w
  1550  026F  00F6               	movwf	??_Send_RS485
  1551  0270  0876               	movf	??_Send_RS485,w
  1552  0271  07E6               	addwf	Send_RS485@chksum,f
  1553  0272                     l1722:
  1554                           
  1555                           ;main.c: 285:     }
  1556  0272  3001               	movlw	1
  1557  0273  00F6               	movwf	??_Send_RS485
  1558  0274  0876               	movf	??_Send_RS485,w
  1559  0275  07E8               	addwf	Send_RS485@i,f
  1560  0276                     l1724:
  1561  0276  0875               	movf	Send_RS485@n,w
  1562  0277  0268               	subwf	Send_RS485@i,w
  1563  0278  1C03               	skipc
  1564  0279  2A7B               	goto	u911
  1565  027A  2A7C               	goto	u910
  1566  027B                     u911:
  1567  027B  2A61               	goto	l1716
  1568  027C                     u910:
  1569  027C                     l1726:
  1570                           
  1571                           ;main.c: 286:     put_UART(chksum & 0xFF);
  1572  027C  0866               	movf	Send_RS485@chksum,w
  1573  027D  3183  2310  3182   	fcall	_put_UART
  1574  0280                     l1728:
  1575                           
  1576                           ;main.c: 287:     uart_wr_ptr = 0;
  1577  0280  0020               	movlb	0	; select bank0
  1578  0281  01E3               	clrf	_uart_wr_ptr
  1579  0282                     l1730:
  1580                           
  1581                           ;main.c: 288:     for (i = 0; i < 10; i++) {
  1582  0282  01E8               	clrf	Send_RS485@i
  1583  0283                     l1736:
  1584                           
  1585                           ;main.c: 289:         for (j = 0; j < 10; j++);
  1586  0283  01E7               	clrf	Send_RS485@j
  1587  0284                     l1742:
  1588  0284  3001               	movlw	1
  1589  0285  00F6               	movwf	??_Send_RS485
  1590  0286  0876               	movf	??_Send_RS485,w
  1591  0287  07E7               	addwf	Send_RS485@j,f
  1592  0288                     l1744:
  1593  0288  300A               	movlw	10
  1594  0289  0267               	subwf	Send_RS485@j,w
  1595  028A  1C03               	skipc
  1596  028B  2A8D               	goto	u921
  1597  028C  2A8E               	goto	u920
  1598  028D                     u921:
  1599  028D  2A84               	goto	l1742
  1600  028E                     u920:
  1601  028E                     l1746:
  1602                           
  1603                           ;main.c: 290:     }
  1604  028E  3001               	movlw	1
  1605  028F  00F6               	movwf	??_Send_RS485
  1606  0290  0876               	movf	??_Send_RS485,w
  1607  0291  07E8               	addwf	Send_RS485@i,f
  1608  0292                     l1748:
  1609  0292  300A               	movlw	10
  1610  0293  0268               	subwf	Send_RS485@i,w
  1611  0294  1C03               	skipc
  1612  0295  2A97               	goto	u931
  1613  0296  2A98               	goto	u930
  1614  0297                     u931:
  1615  0297  2A83               	goto	l1736
  1616  0298                     u930:
  1617  0298                     l220:
  1618  0298  0008               	return
  1619  0299                     __end_of_Send_RS485:
  1620                           
  1621                           	psect	text4
  1622  0310                     __ptext4:	
  1623 ;; *************** function _put_UART *****************
  1624 ;; Defined at:
  1625 ;;		line 261 in file "main.c"
  1626 ;; Parameters:    Size  Location     Type
  1627 ;;  data            1    wreg     unsigned char 
  1628 ;; Auto vars:     Size  Location     Type
  1629 ;;  data            1    3[COMMON] unsigned char 
  1630 ;; Return value:  Size  Location     Type
  1631 ;;                  1    wreg      void 
  1632 ;; Registers used:
  1633 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  1634 ;; Tracked objects:
  1635 ;;		On entry : 0/0
  1636 ;;		On exit  : 0/0
  1637 ;;		Unchanged: 0/0
  1638 ;; Data sizes:     COMMON   BANK0   BANK1
  1639 ;;      Params:         0       0       0
  1640 ;;      Locals:         1       0       0
  1641 ;;      Temps:          1       0       0
  1642 ;;      Totals:         2       0       0
  1643 ;;Total ram usage:        2 bytes
  1644 ;; Hardware stack levels used: 1
  1645 ;; Hardware stack levels required when called: 1
  1646 ;; This function calls:
  1647 ;;		Nothing
  1648 ;; This function is called by:
  1649 ;;		_Send_RS485
  1650 ;; This function uses a non-reentrant model
  1651 ;;
  1652                           
  1653                           
  1654                           ;psect for function _put_UART
  1655  0310                     _put_UART:
  1656                           
  1657                           ;incstack = 0
  1658                           ; Regs used in _put_UART: [wreg+fsr1l+fsr1h+status,2+status,0]
  1659                           ;put_UART@data stored from wreg
  1660  0310  00F3               	movwf	put_UART@data
  1661  0311                     l1618:
  1662                           
  1663                           ;main.c: 262:     UART_wr_buffer[uart_wr_ptr] = data;
  1664  0311  0873               	movf	put_UART@data,w
  1665  0312  00F2               	movwf	??_put_UART
  1666  0313  0020               	movlb	0	; select bank0
  1667  0314  0863               	movf	_uart_wr_ptr,w
  1668  0315  3E20               	addlw	(low (_UART_wr_buffer| 0))& (0+255)
  1669  0316  0086               	movwf	6
  1670  0317  0187               	clrf	7
  1671  0318  0872               	movf	??_put_UART,w
  1672  0319  0081               	movwf	1
  1673  031A                     l1620:
  1674                           
  1675                           ;main.c: 263:     uart_wr_ptr++;
  1676  031A  3001               	movlw	1
  1677  031B  00F2               	movwf	??_put_UART
  1678  031C  0872               	movf	??_put_UART,w
  1679  031D  07E3               	addwf	_uart_wr_ptr,f
  1680  031E                     l1622:
  1681                           
  1682                           ;main.c: 264:     n_uart_wrbuf++;
  1683  031E  3001               	movlw	1
  1684  031F  00F2               	movwf	??_put_UART
  1685  0320  0872               	movf	??_put_UART,w
  1686  0321  07E1               	addwf	_n_uart_wrbuf,f
  1687  0322                     l210:
  1688  0322  0008               	return
  1689  0323                     __end_of_put_UART:
  1690                           
  1691                           	psect	text5
  1692  01B5                     __ptext5:	
  1693 ;; *************** function _Rcv_RS485 *****************
  1694 ;; Defined at:
  1695 ;;		line 306 in file "main.c"
  1696 ;; Parameters:    Size  Location     Type
  1697 ;;		None
  1698 ;; Auto vars:     Size  Location     Type
  1699 ;;  data            1    7[COMMON] unsigned char 
  1700 ;;  i               1    6[COMMON] unsigned char 
  1701 ;;  ret             1    0        unsigned char 
  1702 ;; Return value:  Size  Location     Type
  1703 ;;                  1    wreg      unsigned char 
  1704 ;; Registers used:
  1705 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1706 ;; Tracked objects:
  1707 ;;		On entry : 0/0
  1708 ;;		On exit  : 0/0
  1709 ;;		Unchanged: 0/0
  1710 ;; Data sizes:     COMMON   BANK0   BANK1
  1711 ;;      Params:         0       0       0
  1712 ;;      Locals:         2       0       0
  1713 ;;      Temps:          2       0       0
  1714 ;;      Totals:         4       0       0
  1715 ;;Total ram usage:        4 bytes
  1716 ;; Hardware stack levels used: 1
  1717 ;; Hardware stack levels required when called: 2
  1718 ;; This function calls:
  1719 ;;		_get_UART
  1720 ;; This function is called by:
  1721 ;;		_COMM_RS485
  1722 ;; This function uses a non-reentrant model
  1723 ;;
  1724                           
  1725                           
  1726                           ;psect for function _Rcv_RS485
  1727  01B5                     _Rcv_RS485:
  1728  01B5                     l1642:	
  1729                           ;incstack = 0
  1730                           ; Regs used in _Rcv_RS485: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1731                           
  1732                           
  1733                           ;main.c: 309:     uart_rd_ptr = 0;
  1734  01B5  01FB               	clrf	_uart_rd_ptr
  1735  01B6                     l1644:
  1736                           
  1737                           ;main.c: 310:     data = get_UART();
  1738  01B6  3182  22F8  3181   	fcall	_get_UART
  1739  01B9  00F4               	movwf	??_Rcv_RS485
  1740  01BA  0874               	movf	??_Rcv_RS485,w
  1741  01BB  00F7               	movwf	Rcv_RS485@data
  1742  01BC                     l1646:
  1743                           
  1744                           ;main.c: 312:     if (data != 0xFF) {
  1745  01BC  0A77               	incf	Rcv_RS485@data,w
  1746  01BD  1903               	btfsc	3,2
  1747  01BE  29C0               	goto	u861
  1748  01BF  29C1               	goto	u860
  1749  01C0                     u861:
  1750  01C0  29CD               	goto	l1654
  1751  01C1                     u860:
  1752  01C1  29C8               	goto	l1652
  1753  01C2                     l1650:
  1754                           
  1755                           ;main.c: 314:             data = get_UART();
  1756  01C2  3182  22F8  3181   	fcall	_get_UART
  1757  01C5  00F4               	movwf	??_Rcv_RS485
  1758  01C6  0874               	movf	??_Rcv_RS485,w
  1759  01C7  00F7               	movwf	Rcv_RS485@data
  1760  01C8                     l1652:
  1761                           
  1762                           ;main.c: 313:         while (data != 0xFF) {
  1763  01C8  0A77               	incf	Rcv_RS485@data,w
  1764  01C9  1D03               	btfss	3,2
  1765  01CA  29CC               	goto	u871
  1766  01CB  29CD               	goto	u870
  1767  01CC                     u871:
  1768  01CC  29C2               	goto	l1650
  1769  01CD                     u870:
  1770  01CD                     l1654:
  1771                           
  1772                           ;main.c: 318:     data = get_UART();
  1773  01CD  3182  22F8  3181   	fcall	_get_UART
  1774  01D0  00F4               	movwf	??_Rcv_RS485
  1775  01D1  0874               	movf	??_Rcv_RS485,w
  1776  01D2  00F7               	movwf	Rcv_RS485@data
  1777  01D3                     l1656:
  1778                           
  1779                           ;main.c: 319:     if (data != 0xFF) {
  1780  01D3  0A77               	incf	Rcv_RS485@data,w
  1781  01D4  1903               	btfsc	3,2
  1782  01D5  29D7               	goto	u881
  1783  01D6  29D8               	goto	u880
  1784  01D7                     u881:
  1785  01D7  29DE               	goto	l1664
  1786  01D8                     u880:
  1787  01D8                     l1658:
  1788                           
  1789                           ;main.c: 320:         uart_rd_ptr = 0;
  1790  01D8  01FB               	clrf	_uart_rd_ptr
  1791                           
  1792                           ;main.c: 321:         uart_buf_bytes = 0;
  1793  01D9  0020               	movlb	0	; select bank0
  1794  01DA  01E2               	clrf	_uart_buf_bytes
  1795                           
  1796                           ;main.c: 322:         uart_rcv_complete = 0;
  1797  01DB  01E0               	clrf	_uart_rcv_complete
  1798  01DC                     l1660:
  1799                           
  1800                           ;main.c: 323:         return 1;
  1801  01DC  3001               	movlw	1
  1802  01DD  2A35               	goto	l233
  1803  01DE                     l1664:
  1804                           
  1805                           ;main.c: 328:     if ((0 <= data)&&(data < 5)) {
  1806  01DE  3182  22F8  3181   	fcall	_get_UART
  1807  01E1  00F4               	movwf	??_Rcv_RS485
  1808  01E2  0874               	movf	??_Rcv_RS485,w
  1809  01E3  00F7               	movwf	Rcv_RS485@data
  1810  01E4                     l1666:
  1811  01E4  3005               	movlw	5
  1812  01E5  0277               	subwf	Rcv_RS485@data,w
  1813  01E6  1803               	skipnc
  1814  01E7  29E9               	goto	u891
  1815  01E8  29EA               	goto	u890
  1816  01E9                     u891:
  1817  01E9  29F0               	goto	l1670
  1818  01EA                     u890:
  1819  01EA                     l1668:
  1820                           
  1821                           ;main.c: 329:         CMND = data;
  1822  01EA  0877               	movf	Rcv_RS485@data,w
  1823  01EB  00F4               	movwf	??_Rcv_RS485
  1824  01EC  0874               	movf	??_Rcv_RS485,w
  1825  01ED  0020               	movlb	0	; select bank0
  1826  01EE  00D2               	movwf	_CMND
  1827                           
  1828                           ;main.c: 330:     } else {
  1829  01EF  29F6               	goto	l1676
  1830  01F0                     l1670:
  1831                           
  1832                           ;main.c: 331:         uart_rd_ptr = 0;
  1833  01F0  01FB               	clrf	_uart_rd_ptr
  1834                           
  1835                           ;main.c: 332:         uart_buf_bytes = 0;
  1836  01F1  0020               	movlb	0	; select bank0
  1837  01F2  01E2               	clrf	_uart_buf_bytes
  1838                           
  1839                           ;main.c: 333:         uart_rcv_complete = 0;
  1840  01F3  01E0               	clrf	_uart_rcv_complete
  1841  01F4                     l1672:
  1842                           
  1843                           ;main.c: 334:         return 3;
  1844  01F4  3003               	movlw	3
  1845  01F5  2A35               	goto	l233
  1846  01F6                     l1676:
  1847                           
  1848                           ;main.c: 337:     ID = get_UART();
  1849  01F6  3182  22F8  3181   	fcall	_get_UART
  1850  01F9  00F4               	movwf	??_Rcv_RS485
  1851  01FA  0874               	movf	??_Rcv_RS485,w
  1852  01FB  0020               	movlb	0	; select bank0
  1853  01FC  00D0               	movwf	_ID
  1854                           
  1855                           ;main.c: 338:     a = get_UART();
  1856  01FD  3182  22F8  3181   	fcall	_get_UART
  1857  0200  00F4               	movwf	??_Rcv_RS485
  1858  0201  0874               	movf	??_Rcv_RS485,w
  1859  0202  00FA               	movwf	_a
  1860  0203                     l1678:
  1861                           
  1862                           ;main.c: 339:     for (i = 0; i < LEN + 4; i++) {
  1863  0203  01F6               	clrf	Rcv_RS485@i
  1864  0204  2A1D               	goto	l1684
  1865  0205                     l1680:
  1866                           
  1867                           ;main.c: 340:         UART_wr_buffer[i] = UART_rd_buffer[i];
  1868  0205  0876               	movf	Rcv_RS485@i,w
  1869  0206  3E2A               	addlw	(low (_UART_rd_buffer| 0))& (0+255)
  1870  0207  0086               	movwf	6
  1871  0208  0187               	clrf	7
  1872  0209  0801               	movf	1,w
  1873  020A  00F4               	movwf	??_Rcv_RS485
  1874  020B  0876               	movf	Rcv_RS485@i,w
  1875  020C  3E20               	addlw	(low (_UART_wr_buffer| 0))& (0+255)
  1876  020D  0086               	movwf	6
  1877  020E  0187               	clrf	7
  1878  020F  0874               	movf	??_Rcv_RS485,w
  1879  0210  0081               	movwf	1
  1880                           
  1881                           ;main.c: 341:         msg[i] = data;
  1882  0211  0877               	movf	Rcv_RS485@data,w
  1883  0212  00F4               	movwf	??_Rcv_RS485
  1884  0213  0876               	movf	Rcv_RS485@i,w
  1885  0214  3E34               	addlw	(low (_msg| 0))& (0+255)
  1886  0215  0086               	movwf	6
  1887  0216  0187               	clrf	7
  1888  0217  0874               	movf	??_Rcv_RS485,w
  1889  0218  0081               	movwf	1
  1890  0219                     l1682:
  1891                           
  1892                           ;main.c: 342:     }
  1893  0219  3001               	movlw	1
  1894  021A  00F4               	movwf	??_Rcv_RS485
  1895  021B  0874               	movf	??_Rcv_RS485,w
  1896  021C  07F6               	addwf	Rcv_RS485@i,f
  1897  021D                     l1684:
  1898  021D  0020               	movlb	0	; select bank0
  1899  021E  086E               	movf	_LEN,w
  1900  021F  3E04               	addlw	4
  1901  0220  00F4               	movwf	??_Rcv_RS485
  1902  0221  3000               	movlw	0
  1903  0222  1803               	skipnc
  1904  0223  3001               	movlw	1
  1905  0224  00F5               	movwf	??_Rcv_RS485+1
  1906  0225  0875               	movf	??_Rcv_RS485+1,w
  1907  0226  3A80               	xorlw	128
  1908  0227  3C80               	sublw	128
  1909  0228  1D03               	skipz
  1910  0229  2A2C               	goto	u905
  1911  022A  0874               	movf	??_Rcv_RS485,w
  1912  022B  0276               	subwf	Rcv_RS485@i,w
  1913  022C                     u905:
  1914  022C  1C03               	skipc
  1915  022D  2A2F               	goto	u901
  1916  022E  2A30               	goto	u900
  1917  022F                     u901:
  1918  022F  2A05               	goto	l1680
  1919  0230                     u900:
  1920  0230                     l1686:
  1921                           
  1922                           ;main.c: 344:     uart_rd_ptr = 0;
  1923  0230  01FB               	clrf	_uart_rd_ptr
  1924                           
  1925                           ;main.c: 345:     uart_buf_bytes = 0;
  1926  0231  0020               	movlb	0	; select bank0
  1927  0232  01E2               	clrf	_uart_buf_bytes
  1928                           
  1929                           ;main.c: 346:     uart_rcv_complete = 0;
  1930  0233  01E0               	clrf	_uart_rcv_complete
  1931  0234                     l1688:
  1932                           
  1933                           ;main.c: 348:     return 0;
  1934  0234  3000               	movlw	0
  1935  0235                     l233:
  1936  0235  0008               	return
  1937  0236                     __end_of_Rcv_RS485:
  1938                           
  1939                           	psect	text6
  1940  02F8                     __ptext6:	
  1941 ;; *************** function _get_UART *****************
  1942 ;; Defined at:
  1943 ;;		line 293 in file "main.c"
  1944 ;; Parameters:    Size  Location     Type
  1945 ;;		None
  1946 ;; Auto vars:     Size  Location     Type
  1947 ;;  data            1    3[COMMON] unsigned char 
  1948 ;; Return value:  Size  Location     Type
  1949 ;;                  1    wreg      unsigned char 
  1950 ;; Registers used:
  1951 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  1952 ;; Tracked objects:
  1953 ;;		On entry : 0/0
  1954 ;;		On exit  : 0/0
  1955 ;;		Unchanged: 0/0
  1956 ;; Data sizes:     COMMON   BANK0   BANK1
  1957 ;;      Params:         0       0       0
  1958 ;;      Locals:         1       0       0
  1959 ;;      Temps:          1       0       0
  1960 ;;      Totals:         2       0       0
  1961 ;;Total ram usage:        2 bytes
  1962 ;; Hardware stack levels used: 1
  1963 ;; Hardware stack levels required when called: 1
  1964 ;; This function calls:
  1965 ;;		Nothing
  1966 ;; This function is called by:
  1967 ;;		_Rcv_RS485
  1968 ;; This function uses a non-reentrant model
  1969 ;;
  1970                           
  1971                           
  1972                           ;psect for function _get_UART
  1973  02F8                     _get_UART:
  1974  02F8                     l1624:	
  1975                           ;incstack = 0
  1976                           ; Regs used in _get_UART: [wreg+fsr1l+fsr1h+status,2+status,0]
  1977                           
  1978                           
  1979                           ;main.c: 294:     byte data;;main.c: 296:     if (uart_buf_bytes > 0) {
  1980  02F8  0020               	movlb	0	; select bank0
  1981  02F9  0862               	movf	_uart_buf_bytes,w
  1982  02FA  1903               	btfsc	3,2
  1983  02FB  2AFD               	goto	u851
  1984  02FC  2AFE               	goto	u850
  1985  02FD                     u851:
  1986  02FD  2B0E               	goto	l1638
  1987  02FE                     u850:
  1988  02FE                     l1626:
  1989                           
  1990                           ;main.c: 297:         data = UART_rd_buffer[uart_rd_ptr];
  1991  02FE  087B               	movf	_uart_rd_ptr,w
  1992  02FF  3E2A               	addlw	(low (_UART_rd_buffer| 0))& (0+255)
  1993  0300  0086               	movwf	6
  1994  0301  0187               	clrf	7
  1995  0302  0801               	movf	1,w
  1996  0303  00F2               	movwf	??_get_UART
  1997  0304  0872               	movf	??_get_UART,w
  1998  0305  00F3               	movwf	get_UART@data
  1999  0306                     l1628:
  2000                           
  2001                           ;main.c: 298:         uart_rd_ptr++;
  2002  0306  3001               	movlw	1
  2003  0307  00F2               	movwf	??_get_UART
  2004  0308  0872               	movf	??_get_UART,w
  2005  0309  07FB               	addwf	_uart_rd_ptr,f
  2006  030A                     l1630:
  2007                           
  2008                           ;main.c: 299:         uart_buf_bytes--;
  2009  030A  3001               	movlw	1
  2010  030B  02E2               	subwf	_uart_buf_bytes,f
  2011  030C                     l1632:
  2012                           
  2013                           ;main.c: 300:         return data;
  2014  030C  0873               	movf	get_UART@data,w
  2015  030D  2B0F               	goto	l224
  2016  030E                     l1638:
  2017                           
  2018                           ;main.c: 302:         return 0xFF;
  2019  030E  30FF               	movlw	255
  2020  030F                     l224:
  2021  030F  0008               	return
  2022  0310                     __end_of_get_UART:
  2023                           
  2024                           	psect	intentry
  2025  0004                     __pintentry:	
  2026 ;; *************** function _isr *****************
  2027 ;; Defined at:
  2028 ;;		line 85 in file "main.c"
  2029 ;; Parameters:    Size  Location     Type
  2030 ;;		None
  2031 ;; Auto vars:     Size  Location     Type
  2032 ;;		None
  2033 ;; Return value:  Size  Location     Type
  2034 ;;                  1    wreg      void 
  2035 ;; Registers used:
  2036 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2037 ;; Tracked objects:
  2038 ;;		On entry : 0/0
  2039 ;;		On exit  : 0/0
  2040 ;;		Unchanged: 0/0
  2041 ;; Data sizes:     COMMON   BANK0   BANK1
  2042 ;;      Params:         0       0       0
  2043 ;;      Locals:         0       0       0
  2044 ;;      Temps:          2       0       0
  2045 ;;      Totals:         2       0       0
  2046 ;;Total ram usage:        2 bytes
  2047 ;; Hardware stack levels used: 1
  2048 ;; This function calls:
  2049 ;;		Nothing
  2050 ;; This function is called by:
  2051 ;;		Interrupt level 1
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055  0004                     _isr:
  2056                           
  2057                           ;incstack = 0
  2058  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  2059                           
  2060                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0]
  2061  0005  3180               	pagesel	$
  2062  0006                     i1l1504:
  2063  0006  0020               	movlb	0	; select bank0
  2064  0007  1E91               	btfss	17,5	;volatile
  2065  0008  280A               	goto	u73_21
  2066  0009  280B               	goto	u73_20
  2067  000A                     u73_21:
  2068  000A  287D               	goto	i1l139
  2069  000B                     u73_20:
  2070  000B                     i1l1506:
  2071  000B  0023               	movlb	3	; select bank3
  2072  000C  081D               	movf	29,w	;volatile
  2073  000D  00F0               	movwf	??_isr
  2074  000E  0870               	movf	??_isr,w
  2075  000F  00FA               	movwf	_a
  2076  0010  0819               	movf	25,w	;volatile
  2077  0011  00F0               	movwf	??_isr
  2078  0012  0870               	movf	??_isr,w
  2079  0013  00FA               	movwf	_a
  2080  0014                     i1l1508:
  2081  0014  087A               	movf	_a,w
  2082  0015  00F0               	movwf	??_isr
  2083  0016  087B               	movf	_uart_rd_ptr,w
  2084  0017  3E2A               	addlw	(low (_UART_rd_buffer| 0))& (0+255)
  2085  0018  0086               	movwf	6
  2086  0019  0187               	clrf	7
  2087  001A  0870               	movf	??_isr,w
  2088  001B  0081               	movwf	1
  2089  001C                     i1l1510:
  2090  001C  3001               	movlw	1
  2091  001D  00F0               	movwf	??_isr
  2092  001E  0870               	movf	??_isr,w
  2093  001F  07FB               	addwf	_uart_rd_ptr,f
  2094  0020                     i1l1512:
  2095  0020  3001               	movlw	1
  2096  0021  00F0               	movwf	??_isr
  2097  0022  0870               	movf	??_isr,w
  2098  0023  0020               	movlb	0	; select bank0
  2099  0024  07E2               	addwf	_uart_buf_bytes,f
  2100  0025                     i1l1514:
  2101  0025  084F               	movf	_FF_mode,w
  2102  0026  1D03               	btfss	3,2
  2103  0027  2829               	goto	u74_21
  2104  0028  282A               	goto	u74_20
  2105  0029                     u74_21:
  2106  0029  2835               	goto	i1l1522
  2107  002A                     u74_20:
  2108  002A                     i1l1516:
  2109  002A  0A7A               	incf	_a,w
  2110  002B  1D03               	btfss	3,2
  2111  002C  282E               	goto	u75_21
  2112  002D  282F               	goto	u75_20
  2113  002E                     u75_21:
  2114  002E  2832               	goto	i1l1520
  2115  002F                     u75_20:
  2116  002F                     i1l1518:
  2117  002F  01CF               	clrf	_FF_mode
  2118  0030  0ACF               	incf	_FF_mode,f
  2119  0031  2876               	goto	i1l1540
  2120  0032                     i1l1520:
  2121  0032  01FB               	clrf	_uart_rd_ptr
  2122  0033  01E2               	clrf	_uart_buf_bytes
  2123  0034  2876               	goto	i1l1540
  2124  0035                     i1l1522:
  2125  0035  034F               	decf	_FF_mode,w
  2126  0036  1D03               	btfss	3,2
  2127  0037  2839               	goto	u76_21
  2128  0038  283A               	goto	u76_20
  2129  0039                     u76_21:
  2130  0039  2849               	goto	i1l1528
  2131  003A                     u76_20:
  2132  003A                     i1l1524:
  2133  003A  0A7A               	incf	_a,w
  2134  003B  1D03               	btfss	3,2
  2135  003C  283E               	goto	u77_21
  2136  003D  283F               	goto	u77_20
  2137  003E                     u77_21:
  2138  003E  2844               	goto	i1l145
  2139  003F                     u77_20:
  2140  003F                     i1l1526:
  2141  003F  3002               	movlw	2
  2142  0040  00F0               	movwf	??_isr
  2143  0041  0870               	movf	??_isr,w
  2144  0042  00CF               	movwf	_FF_mode
  2145  0043  2876               	goto	i1l1540
  2146  0044                     i1l145:
  2147  0044  01FB               	clrf	_uart_rd_ptr
  2148  0045  0AFB               	incf	_uart_rd_ptr,f
  2149  0046  01E2               	clrf	_uart_buf_bytes
  2150  0047  0AE2               	incf	_uart_buf_bytes,f
  2151  0048  2876               	goto	i1l1540
  2152  0049                     i1l1528:
  2153  0049  3002               	movlw	2
  2154  004A  064F               	xorwf	_FF_mode,w
  2155  004B  1D03               	btfss	3,2
  2156  004C  284E               	goto	u78_21
  2157  004D  284F               	goto	u78_20
  2158  004E                     u78_21:
  2159  004E  2876               	goto	i1l1540
  2160  004F                     u78_20:
  2161  004F                     i1l1530:
  2162  004F  0860               	movf	_uart_rcv_complete,w
  2163  0050  1D03               	btfss	3,2
  2164  0051  2853               	goto	u79_21
  2165  0052  2854               	goto	u79_20
  2166  0053                     u79_21:
  2167  0053  2876               	goto	i1l1540
  2168  0054                     u79_20:
  2169  0054                     i1l1532:
  2170  0054  3005               	movlw	5
  2171  0055  0662               	xorwf	_uart_buf_bytes,w
  2172  0056  1D03               	btfss	3,2
  2173  0057  2859               	goto	u80_21
  2174  0058  285A               	goto	u80_20
  2175  0059                     u80_21:
  2176  0059  285E               	goto	i1l150
  2177  005A                     u80_20:
  2178  005A                     i1l1534:
  2179  005A  087A               	movf	_a,w
  2180  005B  00F0               	movwf	??_isr
  2181  005C  0870               	movf	??_isr,w
  2182  005D  00EE               	movwf	_LEN
  2183  005E                     i1l150:
  2184  005E  086E               	movf	_LEN,w
  2185  005F  3E05               	addlw	5
  2186  0060  00F0               	movwf	??_isr
  2187  0061  3000               	movlw	0
  2188  0062  1803               	skipnc
  2189  0063  3001               	movlw	1
  2190  0064  00F1               	movwf	??_isr+1
  2191  0065  0871               	movf	??_isr+1,w
  2192  0066  3A80               	xorlw	128
  2193  0067  3C80               	sublw	128
  2194  0068  1D03               	skipz
  2195  0069  286C               	goto	u81_25
  2196  006A  0870               	movf	??_isr,w
  2197  006B  0262               	subwf	_uart_buf_bytes,w
  2198  006C                     u81_25:
  2199  006C  1C03               	skipc
  2200  006D  286F               	goto	u81_21
  2201  006E  2870               	goto	u81_20
  2202  006F                     u81_21:
  2203  006F  2876               	goto	i1l1540
  2204  0070                     u81_20:
  2205  0070                     i1l1536:
  2206  0070  0020               	movlb	0	; select bank0
  2207  0071  01E0               	clrf	_uart_rcv_complete
  2208  0072  0AE0               	incf	_uart_rcv_complete,f
  2209  0073  160C               	bsf	12,4	;volatile
  2210  0074                     i1l1538:
  2211  0074  01FB               	clrf	_uart_rd_ptr
  2212  0075  01CF               	clrf	_FF_mode
  2213  0076                     i1l1540:
  2214  0076  0023               	movlb	3	; select bank3
  2215  0077  1C9D               	btfss	29,1	;volatile
  2216  0078  287A               	goto	u82_21
  2217  0079  287B               	goto	u82_20
  2218  007A                     u82_21:
  2219  007A  287D               	goto	i1l139
  2220  007B                     u82_20:
  2221  007B                     i1l1542:
  2222  007B  121D               	bcf	29,4	;volatile
  2223  007C  161D               	bsf	29,4	;volatile
  2224  007D                     i1l139:
  2225  007D  0023               	movlb	3	; select bank3
  2226  007E  161D               	bsf	29,4	;volatile
  2227  007F  0021               	movlb	1	; select bank1
  2228  0080  1691               	bsf	17,5	;volatile
  2229  0081  170B               	bsf	11,6	;volatile
  2230  0082  178B               	bsf	11,7	;volatile
  2231  0083                     i1l153:
  2232  0083  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2233  0084  0009               	retfie
  2234  0085                     __end_of_isr:
  2235  007E                     btemp	set	126	;btemp
  2236  007E                     int$flags	set	126
  2237  007E                     wtemp0	set	126
  2238                           
  2239                           	psect	config
  2240                           
  2241                           ;Config register CONFIG1 @ 0x8007
  2242                           ;	Oscillator Selection
  2243                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  2244                           ;	Watchdog Timer Enable
  2245                           ;	WDTE = OFF, WDT disabled
  2246                           ;	Power-up Timer Enable
  2247                           ;	PWRTE = OFF, PWRT disabled
  2248                           ;	MCLR Pin Function Select
  2249                           ;	MCLRE = OFF, MCLR/VPP pin function is digital input
  2250                           ;	Flash Program Memory Code Protection
  2251                           ;	CP = OFF, Program memory code protection is disabled
  2252                           ;	Data Memory Code Protection
  2253                           ;	CPD = OFF, Data memory code protection is disabled
  2254                           ;	Brown-out Reset Enable
  2255                           ;	BOREN = ON, Brown-out Reset enabled
  2256                           ;	Clock Out Enable
  2257                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  2258                           ;	Internal/External Switchover
  2259                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  2260                           ;	Fail-Safe Clock Monitor Enable
  2261                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  2262  8007                     	org	32775
  2263  8007  0FA4               	dw	4004
  2264                           
  2265                           ;Config register CONFIG2 @ 0x8008
  2266                           ;	Flash Memory Self-Write Protection
  2267                           ;	WRT = OFF, Write protection off
  2268                           ;	PLL Enable
  2269                           ;	PLLEN = OFF, 4x PLL disabled
  2270                           ;	Stack Overflow/Underflow Reset Enable
  2271                           ;	STVREN = OFF, Stack Overflow or Underflow will not cause a Reset
  2272                           ;	Brown-out Reset Voltage Selection
  2273                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  2274                           ;	Low-Voltage Programming Enable
  2275                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  2276  8008                     	org	32776
  2277  8008  1CFF               	dw	7423

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         70
    Persistent  33
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     10      79
    BANK1            32      4       4

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_COMM_RS485
    _COMM_RS485->_Rcv_RS485
    _Send_RS485->_put_UART
    _Rcv_RS485->_get_UART

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_COMM_RS485
    _COMM_RS485->_Send_RS485

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0    2334
                                              9 BANK0      1     1      0
                                              0 BANK1      4     4      0
                         _COMM_RS485
                    _InitializeUSART
 ---------------------------------------------------------------------------------
 (1) _InitializeUSART                                      1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _COMM_RS485                                          13    13      0    2198
                                              8 COMMON     2     2      0
                                              5 BANK0      4     4      0
                          _Rcv_RS485
                         _Send_RS485
 ---------------------------------------------------------------------------------
 (2) _Send_RS485                                           8     6      2    1283
                                              4 COMMON     3     1      2
                                              0 BANK0      5     5      0
                           _put_UART
 ---------------------------------------------------------------------------------
 (3) _put_UART                                             2     2      0      31
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _Rcv_RS485                                            5     5      0     365
                                              4 COMMON     4     4      0
                           _get_UART
 ---------------------------------------------------------------------------------
 (3) _get_UART                                             2     2      0      34
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _COMM_RS485
     _Rcv_RS485
       _get_UART
     _Send_RS485
       _put_UART
   _InitializeUSART

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      5F       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      A      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      4       4       8       12.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      5F       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Tue Sep 21 13:34:38 2021

                       _a 007A                        _ID 0050                        _SW 003C  
                     l210 0322                       l220 0298                       l204 01B4  
                     l207 0331                       l224 030F                       l233 0235  
                     l170 016F                       l195 0186                       l198 01B4  
                     l199 0193                       _GIE 005F                       _RA4 0064  
                     _RA5 0065                       _LEN 006E                       _SID 0051  
                     u900 0230                       u901 022F                       u910 027C  
                     u911 027B                       u920 028E                       u905 022C  
                     u921 028D                       u850 02FE                       u930 0298  
                     u851 02FD                       u931 0297                       u860 01C1  
                     u940 0099                       u861 01C0                       u941 0098  
                     u870 01CD                       u950 00AD                       u871 01CC  
                     u951 00AC                       u880 01D8                       u960 00B7  
                     u881 01D7                       u961 00B6                       u890 01EA  
                     u970 00BD                       u891 01E9                       u971 00BC  
                     u980 00C2                       u981 00C1                       u990 00C8  
                     u991 00C7                       _cnt 005B                       _isr 0004  
                     _msg 0034                       wreg 0009                      l1620 031A  
                    l1700 023F                      l1630 030A                      l1622 031E  
                    l1710 0256                      l1702 0243                      l1632 030C  
                    l1624 02F8                      l1720 026D                      l1712 025A  
                    l1704 0248                      l1800 00F6                      l1626 02FE  
                    l1650 01C2                      l1642 01B5                      l1618 0311  
                    l1730 0282                      l1722 0272                      l1714 025F  
                    l1706 024D                      l1810 0118                      l1802 0103  
                    l1628 0306                      l1660 01DC                      l1652 01C8  
                    l1644 01B6                      l1716 0261                      l1724 0276  
                    l1708 0251                      l1820 0143                      l1812 0128  
                    l1804 0108                      l1900 02B3                      l1638 030E  
                    l1670 01F0                      l1654 01CD                      l1646 01BC  
                    l1742 0284                      l1726 027C                      l1718 0269  
                    l1822 0148                      l1814 012C                      l1806 010D  
                    l1830 016F                      l1750 0093                      l1910 02BC  
                    l1902 02B6                      l1680 0205                      l1672 01F4  
                    l1664 01DE                      l1656 01D3                      l1744 0288  
                    l1736 0283                      l1728 0280                      l1824 014C  
                    l1816 0139                      l1808 0110                      l1752 0093  
                    l1920 02C5                      l1912 02BE                      l1904 02B8  
                    l1682 0219                      l1666 01E4                      l1658 01D8  
                    l1746 028E                      l1850 018B                      l1842 0172  
                    l1818 013E                      l1770 00A3                      l1754 0099  
                    l1922 02C8                      l1914 02BF                      l1906 02BA  
                    l1684 021D                      l1676 01F6                      l1668 01EA  
                    l1748 0292                      l1692 0238                      l1860 01A5  
                    l1852 0191                      l1844 0176                      l1836 0171  
                    l1780 00BD                      l1828 0159                      l1772 00A7  
                    l1764 00A2                      l1756 00A0                      l1916 02C0  
                    l1908 02BB                      l1686 0230                      l1678 0203  
                    l1694 0239                      l1862 01AB                      l1854 0194  
                    l1846 017C                      l1790 00D6                      l1782 00C3  
                    l1774 00AD                      l1758 00A1                      l1934 02CE  
                    l1918 02C4                      l1688 0234                      l1696 023A  
                    l1864 01AC                      l1856 0199                      l1848 0180  
                    l1792 00E3                      l1784 00C8                      l1776 00B1  
                    l1880 032D                      l1936 02E2                      l1928 02CB  
                    l1698 023B                      l1866 01AE                      l1858 01A0  
                    l1794 00E8                      l1786 00CD                      l1778 00B7  
                    l1882 032F                      l1874 0323                      l1890 02A5  
                    l1868 01B3                      l1796 00ED                      l1788 00D2  
                    l1876 032A                      l1892 02A8                      l1884 0299  
                    l1958 0161                      l1798 00F2                      l1878 032B  
                    l1894 02AA                      l1886 029E                      l1896 02AB  
                    l1888 02A0                      l1898 02B2                      ?_isr 0070  
                    _ADGO 04E9                      _CMND 0052                      u1000 00CD  
                    _CREN 0CEC                      u1001 00CC                      u1010 00E8  
                    u1011 00E7                      u1100 018B                      u1020 00ED  
                    u1101 018A                      u1021 00EC                      u1110 0191  
                    u1030 0108                      u1111 0190                      u1031 0107  
                    u1120 0199                      u1040 010D                      u1121 0198  
                    u1041 010C                      u1130 01AB                      u1050 0118  
                    u1131 01AA                      u1051 0117                      u1140 01B3  
                    u1060 013E                      u1141 01B2                      u1061 013D  
                    u1070 0143                      u1150 02E2                      u1071 0142  
                    u1151 02E1                      u1080 017C                      u1160 02F6  
                    u1081 017B                      u1161 02F5                      u1090 0186  
                    u1091 0185                      u1155 02DE                      u1165 02F2  
                    _PEIE 005E                      _RCIE 048D                      _RCIF 008D  
                    _OERR 0CE9                      _TMR0 0015                      _cnt0 003F  
                    _cnt1 0053                      _main 0299                      fsr0h 0005  
                    fsr1h 0007                      indf0 0000                      fsr0l 0004  
                    indf1 0001                      fsr1l 0006                      btemp 007E  
                    start 0085                     ??_isr 0070       __size_of_COMM_RS485 0122  
                   ?_main 0070                Rcv_RS485@i 0076                     i1l150 005E  
                   i1l153 0083                     i1l145 0044                     i1l139 007D  
                   _REGC7 005E                     _RCREG 0199                     _RCSTA 019D  
                   _TMR0H 0047                     _TMR0L 0049                     _SPBRG 019B  
                   _PORTA 000C                     u80_20 005A                     u80_21 0059  
                   u81_20 0070                     u73_20 000B                     u81_21 006F  
                   u73_21 000A                     _TRISA 008C                     u81_25 006C  
                   u82_20 007B                     u74_20 002A                     u82_21 007A  
                   u74_21 0029                     u75_20 002F                     u75_21 002E  
                   u76_20 003A                     u76_21 0039                     u77_20 003F  
                   u77_21 003E                     u78_20 004F                     u78_21 004E  
                   u79_20 0054                     u79_21 0053                     _TXREG 019A  
                   _TXSTA 019E                     _cnt01 0041                     main@i 00A0  
                   main@j 00A2                     status 0003                     wtemp0 007E  
         __initialization 0086              __end_of_main 02F8                    ??_main 006D  
              _Send_RS485 0236                    _ADCON0 009D                    _I2C_DA 0058  
                  _I2C_RA 0057                    _ADRESH 009C                    _ADRESL 009B  
                  _APFCON 011D                    _ANSELA 018C                    i1l1510 001C  
                  i1l1520 0032                    i1l1512 0020                    i1l1504 0006  
                  i1l1530 004F                    i1l1522 0035                    i1l1514 0025  
                  i1l1506 000B                    i1l1532 0054                    i1l1524 003A  
                  i1l1540 0076                    i1l1516 002A                    i1l1508 0014  
                  i1l1542 007B                    i1l1534 005A                    i1l1526 003F  
                  i1l1518 002F                    i1l1536 0070                    i1l1528 0049  
                  i1l1538 0074                    _INTCON 000B                    _RCVFLG 0054  
                  _OSCCON 0099                    _TMR0H1 0043                    _TMR0L1 0045  
                  _SPBRGH 019C          __end_of_get_UART 0310        __size_of_Rcv_RS485 0081  
        __end_of_put_UART 0323               Send_RS485@i 0068               Send_RS485@j 0067  
             Send_RS485@n 0075              ??_COMM_RS485 0078   __end_of__initialization 0090  
          __pcstackCOMMON 0070  __size_of_InitializeUSART 000F        __end_of_COMM_RS485 01B5  
       __end_of_Rcv_RS485 0236               ?_Send_RS485 0074                __pbssBANK0 0020  
              __pmaintext 0299                __pintentry 0004                   _CCP1CON 0293  
                 _BAUDCON 019F                   _FF_mode 004F                 ?_get_UART 0070  
               _I2C_MDATA 0056                 _I2C_SDATA 0055                 _I2C_state 0059  
               ?_put_UART 0070       __size_of_Send_RS485 0063                   __ptext1 0323  
                 __ptext2 0093                   __ptext3 0236                   __ptext4 0310  
                 __ptext5 01B5                   __ptext6 02F8         ??_InitializeUSART 0072  
                 _ctstart 005F              __size_of_isr 0081             _message_state 005C  
              ??_get_UART 0072                   clrloop0 0333      end_of_initialization 0090  
               _COM_stage 005D         COMM_RS485@i2cdata 004C                _tick_count 005A  
            Send_RS485@ID 0074                ??_put_UART 0072         COMM_RS485@devaddr 004E  
       COMM_RS485@regaddr 004D                 _TXSTAbits 019E         _uart_rcv_complete 0060  
        Send_RS485@chksum 0066            _UART_rd_buffer 002A            COMM_RS485@Resp 0069  
     start_initialization 0086              ??_Send_RS485 0076               __end_of_isr 0085  
               _Rcv_RS485 01B5            _UART_wr_buffer 0020        __end_of_Send_RS485 0299  
             __pbssCOMMON 007A                 ___latbits 0000             __pcstackBANK0 0064  
           __pcstackBANK1 00A0              _n_uart_wrbuf 0061                ?_Rcv_RS485 0070  
       __size_of_get_UART 0018            _uart_buf_bytes 0062                 __pnvBANK0 006E  
         _InitializeUSART 0323         __size_of_put_UART 0013             Rcv_RS485@data 0077  
               clear_ram0 0332               ??_Rcv_RS485 0074             COMM_RS485@RSP 006C  
 __end_of_InitializeUSART 0332              get_UART@data 0073                  _get_UART 02F8  
              _COMM_RS485 0093             __size_of_main 005F                  _put_UART 0310  
                int$flags 007E            Send_RS485@CMND 0064            Send_RS485@data 0065  
              _INTCONbits 000B        COMM_RS485@i2cdata2 004B                  intlevel1 0000  
        ?_InitializeUSART 0070               COMM_RS485@i 006B               COMM_RS485@j 006A  
              _OPTION_REG 0095               _uart_rd_ptr 007B               _uart_wr_ptr 0063  
             ?_COMM_RS485 0070              put_UART@data 0073  
